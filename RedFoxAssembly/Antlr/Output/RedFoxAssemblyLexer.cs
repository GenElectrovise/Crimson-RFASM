//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/RedFoxAssembly.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RedFoxAssembly.AntlrBuild {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class RedFoxAssemblyLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Label=1, Width=2, Value=3, HLT=4, NOP=5, ADD=6, SUB=7, LSL=8, LSR=9, NEG=10, 
		NOT=11, CMP=12, JMP=13, BFG=14, BSR=15, RTN=16, RRB=17, RRW=18, RMB=19, 
		RMW=20, WRB=21, WRW=22, WMB=23, WMW=24, RVB=25, RVW=26, SIN=27, INT=28, 
		SFG=29, AND=30, LOR=31, XOR=32, IsTargettingRegister=33, HexPrefix=34, 
		Underscore=35, Quote=36, Comma=37, Number=38, ByteLetter=39, Identifier=40, 
		LineComment=41, SkipTokens=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Label", "Width", "Value", "HLT", "NOP", "ADD", "SUB", "LSL", "LSR", "NEG", 
		"NOT", "CMP", "JMP", "BFG", "BSR", "RTN", "RRB", "RRW", "RMB", "RMW", 
		"WRB", "WRW", "WMB", "WMW", "RVB", "RVW", "SIN", "INT", "SFG", "AND", 
		"LOR", "XOR", "IsTargettingRegister", "HexPrefix", "Underscore", "Quote", 
		"Comma", "Number", "ByteLetter", "Identifier", "LineComment", "SkipTokens", 
		"Alphabetic", "Digit", "WhiteSpace", "Newline"
	};


	public RedFoxAssemblyLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RedFoxAssemblyLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'::'", "'.width'", "'.value'", "'HLT'", "'NOP'", "'ADD'", "'SUB'", 
		"'LSL'", "'LSR'", "'NEG'", "'NOT'", "'CMP'", "'JMP'", "'BFG'", "'BSR'", 
		"'RTN'", "'RRB'", "'RRW'", "'RMB'", "'RMW'", "'WRB'", "'WRW'", "'WMB'", 
		"'WMW'", "'RVB'", "'RVW'", "'SIN'", "'INT'", "'SFG'", "'AND'", "'LOR'", 
		"'XOR'", "'R'", "'0x'", "'_'", "'''", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Label", "Width", "Value", "HLT", "NOP", "ADD", "SUB", "LSL", "LSR", 
		"NEG", "NOT", "CMP", "JMP", "BFG", "BSR", "RTN", "RRB", "RRW", "RMB", 
		"RMW", "WRB", "WRW", "WMB", "WMW", "RVB", "RVW", "SIN", "INT", "SFG", 
		"AND", "LOR", "XOR", "IsTargettingRegister", "HexPrefix", "Underscore", 
		"Quote", "Comma", "Number", "ByteLetter", "Identifier", "LineComment", 
		"SkipTokens"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RedFoxAssembly.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RedFoxAssemblyLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,287,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
		1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,
		13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,
		20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
		23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,
		27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,
		30,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,
		36,1,36,1,37,4,37,239,8,37,11,37,12,37,240,1,38,1,38,1,39,1,39,1,39,1,
		39,4,39,249,8,39,11,39,12,39,250,1,39,1,39,1,40,1,40,1,40,1,40,5,40,259,
		8,40,10,40,12,40,262,9,40,1,41,1,41,1,41,3,41,267,8,41,1,41,1,41,1,42,
		1,42,1,43,1,43,1,44,4,44,276,8,44,11,44,12,44,277,1,45,4,45,281,8,45,11,
		45,12,45,282,1,45,3,45,286,8,45,0,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
		20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
		32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,0,87,
		0,89,0,91,0,1,0,5,2,0,65,70,97,102,2,0,10,10,13,13,2,0,65,90,97,122,1,
		0,48,57,2,0,9,9,32,32,292,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
		0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
		19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
		0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
		0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
		0,1,93,1,0,0,0,3,96,1,0,0,0,5,103,1,0,0,0,7,110,1,0,0,0,9,114,1,0,0,0,
		11,118,1,0,0,0,13,122,1,0,0,0,15,126,1,0,0,0,17,130,1,0,0,0,19,134,1,0,
		0,0,21,138,1,0,0,0,23,142,1,0,0,0,25,146,1,0,0,0,27,150,1,0,0,0,29,154,
		1,0,0,0,31,158,1,0,0,0,33,162,1,0,0,0,35,166,1,0,0,0,37,170,1,0,0,0,39,
		174,1,0,0,0,41,178,1,0,0,0,43,182,1,0,0,0,45,186,1,0,0,0,47,190,1,0,0,
		0,49,194,1,0,0,0,51,198,1,0,0,0,53,202,1,0,0,0,55,206,1,0,0,0,57,210,1,
		0,0,0,59,214,1,0,0,0,61,218,1,0,0,0,63,222,1,0,0,0,65,226,1,0,0,0,67,228,
		1,0,0,0,69,231,1,0,0,0,71,233,1,0,0,0,73,235,1,0,0,0,75,238,1,0,0,0,77,
		242,1,0,0,0,79,244,1,0,0,0,81,254,1,0,0,0,83,266,1,0,0,0,85,270,1,0,0,
		0,87,272,1,0,0,0,89,275,1,0,0,0,91,285,1,0,0,0,93,94,5,58,0,0,94,95,5,
		58,0,0,95,2,1,0,0,0,96,97,5,46,0,0,97,98,5,119,0,0,98,99,5,105,0,0,99,
		100,5,100,0,0,100,101,5,116,0,0,101,102,5,104,0,0,102,4,1,0,0,0,103,104,
		5,46,0,0,104,105,5,118,0,0,105,106,5,97,0,0,106,107,5,108,0,0,107,108,
		5,117,0,0,108,109,5,101,0,0,109,6,1,0,0,0,110,111,5,72,0,0,111,112,5,76,
		0,0,112,113,5,84,0,0,113,8,1,0,0,0,114,115,5,78,0,0,115,116,5,79,0,0,116,
		117,5,80,0,0,117,10,1,0,0,0,118,119,5,65,0,0,119,120,5,68,0,0,120,121,
		5,68,0,0,121,12,1,0,0,0,122,123,5,83,0,0,123,124,5,85,0,0,124,125,5,66,
		0,0,125,14,1,0,0,0,126,127,5,76,0,0,127,128,5,83,0,0,128,129,5,76,0,0,
		129,16,1,0,0,0,130,131,5,76,0,0,131,132,5,83,0,0,132,133,5,82,0,0,133,
		18,1,0,0,0,134,135,5,78,0,0,135,136,5,69,0,0,136,137,5,71,0,0,137,20,1,
		0,0,0,138,139,5,78,0,0,139,140,5,79,0,0,140,141,5,84,0,0,141,22,1,0,0,
		0,142,143,5,67,0,0,143,144,5,77,0,0,144,145,5,80,0,0,145,24,1,0,0,0,146,
		147,5,74,0,0,147,148,5,77,0,0,148,149,5,80,0,0,149,26,1,0,0,0,150,151,
		5,66,0,0,151,152,5,70,0,0,152,153,5,71,0,0,153,28,1,0,0,0,154,155,5,66,
		0,0,155,156,5,83,0,0,156,157,5,82,0,0,157,30,1,0,0,0,158,159,5,82,0,0,
		159,160,5,84,0,0,160,161,5,78,0,0,161,32,1,0,0,0,162,163,5,82,0,0,163,
		164,5,82,0,0,164,165,5,66,0,0,165,34,1,0,0,0,166,167,5,82,0,0,167,168,
		5,82,0,0,168,169,5,87,0,0,169,36,1,0,0,0,170,171,5,82,0,0,171,172,5,77,
		0,0,172,173,5,66,0,0,173,38,1,0,0,0,174,175,5,82,0,0,175,176,5,77,0,0,
		176,177,5,87,0,0,177,40,1,0,0,0,178,179,5,87,0,0,179,180,5,82,0,0,180,
		181,5,66,0,0,181,42,1,0,0,0,182,183,5,87,0,0,183,184,5,82,0,0,184,185,
		5,87,0,0,185,44,1,0,0,0,186,187,5,87,0,0,187,188,5,77,0,0,188,189,5,66,
		0,0,189,46,1,0,0,0,190,191,5,87,0,0,191,192,5,77,0,0,192,193,5,87,0,0,
		193,48,1,0,0,0,194,195,5,82,0,0,195,196,5,86,0,0,196,197,5,66,0,0,197,
		50,1,0,0,0,198,199,5,82,0,0,199,200,5,86,0,0,200,201,5,87,0,0,201,52,1,
		0,0,0,202,203,5,83,0,0,203,204,5,73,0,0,204,205,5,78,0,0,205,54,1,0,0,
		0,206,207,5,73,0,0,207,208,5,78,0,0,208,209,5,84,0,0,209,56,1,0,0,0,210,
		211,5,83,0,0,211,212,5,70,0,0,212,213,5,71,0,0,213,58,1,0,0,0,214,215,
		5,65,0,0,215,216,5,78,0,0,216,217,5,68,0,0,217,60,1,0,0,0,218,219,5,76,
		0,0,219,220,5,79,0,0,220,221,5,82,0,0,221,62,1,0,0,0,222,223,5,88,0,0,
		223,224,5,79,0,0,224,225,5,82,0,0,225,64,1,0,0,0,226,227,5,82,0,0,227,
		66,1,0,0,0,228,229,5,48,0,0,229,230,5,120,0,0,230,68,1,0,0,0,231,232,5,
		95,0,0,232,70,1,0,0,0,233,234,5,39,0,0,234,72,1,0,0,0,235,236,5,44,0,0,
		236,74,1,0,0,0,237,239,3,87,43,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,
		1,0,0,0,240,241,1,0,0,0,241,76,1,0,0,0,242,243,7,0,0,0,243,78,1,0,0,0,
		244,248,3,69,34,0,245,249,3,85,42,0,246,249,3,75,37,0,247,249,3,69,34,
		0,248,245,1,0,0,0,248,246,1,0,0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,
		248,1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,3,69,34,0,253,80,1,
		0,0,0,254,255,5,47,0,0,255,256,5,47,0,0,256,260,1,0,0,0,257,259,8,1,0,
		0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,
		82,1,0,0,0,262,260,1,0,0,0,263,267,3,89,44,0,264,267,3,91,45,0,265,267,
		3,81,40,0,266,263,1,0,0,0,266,264,1,0,0,0,266,265,1,0,0,0,267,268,1,0,
		0,0,268,269,6,41,0,0,269,84,1,0,0,0,270,271,7,2,0,0,271,86,1,0,0,0,272,
		273,7,3,0,0,273,88,1,0,0,0,274,276,7,4,0,0,275,274,1,0,0,0,276,277,1,0,
		0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,90,1,0,0,0,279,281,7,1,0,0,280,
		279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,286,1,
		0,0,0,284,286,5,0,0,1,285,280,1,0,0,0,285,284,1,0,0,0,286,92,1,0,0,0,9,
		0,240,248,250,260,266,277,282,285,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RedFoxAssembly.AntlrBuild
