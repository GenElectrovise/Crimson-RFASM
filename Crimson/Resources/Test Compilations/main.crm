{
	// Import packages:
	// - Package "utils" from the file "utils.crm", with the name "utils"
	// - Package "console" from the system library, with the name "stdout"

	#using "utils/utils.crm" as utils;
	#using "${NATIVE}/console.crm" as stdout;
	#using "${NATIVE}/heap.crm" as heap;

	// Declare ophandlers:
	//
	#ophandler * -> utils.multiply;

	global counter(4) = 0;
	
	global int_size(1) = 4;
	global ptr_size(1) = 4;

	function main () {

		B~ "example basic call";
		A~ "example assemby call";
		
		a(int_size) = utils.multiply(8);
		b(int_size) = utils.times();
		if (true == true) {
			counter = 5;
		} else if (b == true) {
			c(int_size) = utils.times(5, 3);
			d(ptr_size) = heap.alloc();
		} else {
			return b;
		}
		
		call(4, 7, 5);

		// Allocate memory on the heap for 'i' and get a pointer to it
		i(ptr_size) = heap.alloc(4);

		// Set memory at pointer 'i'
		i *= 4;
			
		// Note usage of functions from imported packages
		stdout.write(i);
		
		ret(ptr_size) = heap.alloc(4);
		ret *= utils.multiply(i, 5);
		return ret;
	}

	function call () {
		test(int_size) = heap.alloc(69);
		return test;
	}

	structure Person {
		age(ptr_size) = heap.alloc(5);
	}
}