// This CrimsonBasic program was automatically generated by the Crimson compiler.
// Copyright (c) 2022-2023 GenElectrovise https://github.com/GenElectrovise and GamesMaster3000X https://github.com/gamesmaster3000x
// Crimson version v0.0
// CrimsonBasic version v0.0
// Crimson, CrimsonBasic and RedFoxAssembly are parts of GamesMaster3000X's RedFoxVirtualMachine.
// The main repository for this project can be found at: https://github.com/gamesmaster3000x/RF_ASM
// Crimson, CrimsonBasic and RedFoxAssembly were implemented by me, GenElectrovise.
// My development fork of the project can be found at: https://github.com/GenElectrovise/RF_ASM


// ============================== Global Variables ==============================
var_set gvar_regions_i_0, -1, 0;
var_set gvar_regions_length_0, -1, 0;
var_set gvar_regions_region_0, -1, 0;
var_set gvar_counter_0, -1, 0;
var_set gvar_int_size_0, -1, 4;
var_set gvar_ptr_size_0, -1, 4;

// (Structures shouldn't be a part of CB)
// ============================== Structures ==============================

// ============================== Entry Function ==============================
:func_main_0:
        example basic call
        A~ "example assemby call"
        // Function Call
        var_set a, -1, ;
        // Function Call
        var_set b, -1, ;
        
        jeq c_r_h 0 NEXT_ELIF
                // 5
            jump END_branch_0
        
        jeq c_r_h 0 NEXT_ELIF
                // Function Call
                var_set c, -1, ;
                // Function Call
                var_set d, -1, ;
            jump END_branch_1
        
        :ELSE:
                return;
        :END_branch_1:
        
        :END_branch_0:
        
        // FC start
        jump func_call_0
        // FC end
        // Function Call
        var_set i, -1, ;
        // 4
        // FC start
        jump func_write_0
        // FC end
        // Function Call
        var_set ret, -1, ;
        // Function Call
        var_set ret, -1, VAR_ASSIGN_C_VAL;
        return;
return;


// ============================== Functions ==============================
:func_multiply_0:
        // FC start
        jump func_write_0
        // FC end
        return;
return;

:func_times_0:
        // Function Call
        var_set ret, -1, ;
        return;
return;

:func_write_0:
return;

:func_alloc_0:
        var_set i, -1, 0;
        
        //  >> TODO IMPLEMENT WHILE (start) <<
        //  >> TODO IMPLEMENT WHILE (end) <<
        
        return;
return;

:func_get_region_ptr_0:
        // Operation
        var_set RRMS, -1, ;
        var_set exponential_offset, -1, 4;
        
        jeq c_r_h 0 NEXT_ELIF
            jump END_branch_2
        
        jeq c_r_h 0 NEXT_ELIF
                // 1
            jump END_branch_3
        
        jeq c_r_h 0 NEXT_ELIF
                // 2
            jump END_branch_4
        
        :ELSE:
                
                //  >> TODO IMPLEMENT WHILE (start) <<
                //  >> TODO IMPLEMENT WHILE (end) <<
                
        :END_branch_4:
        
        :END_branch_3:
        
        :END_branch_2:
        
        // Operation
        var_set HO_EXP, -1, ;
        // Operation
        var_set HO_EXP_RRMS, -1, ;
        return;
return;

:func_freeptr_0:
        var_set r, -1, 0;
        // Function Call
        var_set region_ptr, -1, ;
        
        //  >> TODO IMPLEMENT WHILE (start) <<
        //  >> TODO IMPLEMENT WHILE (end) <<
        
        // FC start
        jump func_freeregion_0
        // FC end
return;

:func_freeregion_0:
        // 0
return;

:func_pwr_0:
        
        //  >> TODO IMPLEMENT WHILE (start) <<
        //  >> TODO IMPLEMENT WHILE (end) <<
        
return;

:func_call_0:
        // Function Call
        var_set test, -1, ;
        return;
return;

