// This CrimsonBasic program was automatically generated by the Crimson compiler.
// Crimson version v0.0
// CrimsonBasic version v0.0
// Copyright (c) 2022 GenElectrovise https://github.com/GenElectrovise and GamesMaster3000X https://github.com/gamesmaster3000x
// In case of problems with this compiler, register an issue or contact the authors at https://github.com/gamesmaster3000x/RF_ASM


// ============================== Global Variables ==============================
stack allocate gvar_counter_0 4
set gvar_counter_0 GLO_VAR_ASSIGN_VAL;

// (Structures shouldn't be a part of CB)
// ============================== Structures ==============================
// GlobalC:stru_Person_0

// ============================== Entry Function ==============================
:func_main_0
stack push_frame 
    
    set rval_0 true == true;
    jeq rval_0 0 NEXT_ELIF
        set counter VAR_ASSIGN_C_VAL;
        jump END_branch_0
    
    jump utils.multiply
    set rval_1 FUNC_RETURN;
    // arg0=rval_1
    jump utils.times
    heap allocate rval_2 6969
    register set REG_RETURN rval_2
    set rval_2 FUNC_RETURN;
    set rval_3 rval_2 == true;
    jeq rval_3 0 NEXT_ELIF
        // arg0=5
        // arg1=3
        jump utils.times
        heap allocate rval_4 6969
        register set REG_RETURN rval_4
        set rval_4 FUNC_RETURN;
        stack allocate a rval_4
        jump END_branch_1
    
    :ELSE
        return;
    :END_branch_1
    
    :END_branch_0
    
    // arg0=4
    // arg1=7
    // arg2=5
    jump call
    heap allocate rval_5 6969
    register set REG_RETURN rval_5
    set rval_5 FUNC_RETURN;
    stack allocate i 4
    set i VAR_ASSIGN_C_VAL;
    // arg0=i
    jump stdout.write
    heap allocate rval_6 6969
    register set REG_RETURN rval_6
    set rval_6 FUNC_RETURN;
    return;
stack pop_frame 
return;


// ============================== Functions ==============================
:func_multiply_0
stack push_frame 
    // arg0=6
    jump utils_stdout.write
    heap allocate rval_7 6969
    register set REG_RETURN rval_7
    set rval_7 FUNC_RETURN;
    return;
stack pop_frame 
return;

:func_times_0
stack push_frame 
    return;
stack pop_frame 
return;

:func_write_0
stack push_frame 
stack pop_frame 
return;

:func_call_0
stack push_frame 
    stack allocate test 69
    return;
stack pop_frame 
return;

