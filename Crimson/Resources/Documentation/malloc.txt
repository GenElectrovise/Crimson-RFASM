
Memory is allocated in blocks. This is a common implementation of the C malloc 
interface because it reduces the memory wastage from next-to-each-other
allocation and is also relatively fast.
The distribution of these blocks is important for the efficiency of the
algorithm. The sizes blocks here are distributed roughly by 4^x.

Region Rx starts at 'HeapOffset + 4*2^(x-2) + x*RegionMetaSize'
i.e. 
	R0 starts at HO + 4*1/4 + 0*RMS
	R1 starts at HO + 4*1/2 + 1*RMS
	R2 starts at HO + 4*1 + 2*RMS
	R3 starts at HO + 4*2 + 3*RMS

RMS = 1byte
Rx                   0     1        2              3
    HEAP OFFSET      ^     ^        ^              ^
  ~~~~~~~~~~~~~~~ 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16
                  ^HO+0

R0: 4*1/4 + 0*1 = 1 + 0 = 1
R1: 4*1/2 + 1*1 = 2 + 1 = 3
R2: 4*1 + 2*1 = 4 + 2 = 6
R3: 4*2 + 3*1 = 8 + 3 = 11


int[] regions = new int[256];

int alloc(int size)
{
	int i = 0;
	while (i < regions.length)
	{
		if ( regions[i] == 0 ) // Region i is empty
		{
			regions[i] = 1;
			return get_region_ptr(r);
		}
		i = i + 1;
	}
	return 0;
}

int get_region_ptr(int r)
{
	return HeapOffset + 4*2^(i-2) + i*RegionMetaSize;
}

void freeptr(int pointer)
{
	int r = 0;
	while ( pointer < get_region_ptr(r) )
	{
		r = r + 1
	}
	freeregion(r);
}

void freeregion(int region)
{
	regions[region] = 0;
}