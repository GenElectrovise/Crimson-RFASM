//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Function=3, Global=4, Return=5, Structure=6, Using=7, 
		OpHandler=8, As=9, If=10, While=11, Else=12, Elif=13, Integer=14, Boolean=15, 
		Null=16, BooleanValue=17, Operator=18, Asterisk=19, MathsOperator=20, 
		Comparator=21, RightArrow=22, Tilda=23, DirectEquals=24, PointerEquals=25, 
		OpenBracket=26, CloseBracket=27, OpenSquare=28, CloseSquare=29, OpenBrace=30, 
		CloseBrace=31, Comma=32, Dot=33, SemiColon=34, Underscore=35, Hashtag=36, 
		Quote=37, SkipTokens=38, LineComment=39, Number=40, String=41, Identifier=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "Function", "Global", "Return", "Structure", "Using", 
		"OpHandler", "As", "If", "While", "Else", "Elif", "Integer", "Boolean", 
		"Null", "True", "False", "BooleanValue", "Operator", "Plus", "Minus", 
		"Asterisk", "Slash", "MathsOperator", "Less", "LessEqual", "Greater", 
		"GreaterEqual", "EqualTo", "Comparator", "RightArrow", "Tilda", "DirectEquals", 
		"PointerEquals", "OpenBracket", "CloseBracket", "OpenSquare", "CloseSquare", 
		"OpenBrace", "CloseBrace", "Comma", "Dot", "SemiColon", "Underscore", 
		"Hashtag", "Quote", "SkipTokens", "LineComment", "Number", "String", "Identifier", 
		"Alphabetic", "Digit", "Punctuation", "WhiteSpace", "Newline"
	};


	public CrimsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CrimsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", "'function'", "'global'", "'return'", "'structure'", 
		"'using'", "'ophandler'", "'as'", "'if'", "'while'", "'else'", "'elif'", 
		"'int'", "'bool'", "'null'", null, null, "'*'", null, null, "'->'", "'~'", 
		"'='", "'*='", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'", 
		"';'", "'_'", "'#'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Function", "Global", "Return", "Structure", "Using", 
		"OpHandler", "As", "If", "While", "Else", "Elif", "Integer", "Boolean", 
		"Null", "BooleanValue", "Operator", "Asterisk", "MathsOperator", "Comparator", 
		"RightArrow", "Tilda", "DirectEquals", "PointerEquals", "OpenBracket", 
		"CloseBracket", "OpenSquare", "CloseSquare", "OpenBrace", "CloseBrace", 
		"Comma", "Dot", "SemiColon", "Underscore", "Hashtag", "Quote", "SkipTokens", 
		"LineComment", "Number", "String", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,357,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,
		1,17,1,17,1,17,1,17,1,17,1,18,1,18,3,18,218,8,18,1,19,1,19,3,19,222,8,
		19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,3,24,236,
		8,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,
		1,30,1,30,1,30,1,30,1,30,3,30,256,8,30,1,31,1,31,1,31,1,32,1,32,1,33,1,
		33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,
		40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,
		47,1,47,1,47,3,47,295,8,47,1,47,1,47,1,48,1,48,1,48,1,48,5,48,303,8,48,
		10,48,12,48,306,9,48,1,49,4,49,309,8,49,11,49,12,49,310,1,50,1,50,5,50,
		315,8,50,10,50,12,50,318,9,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,
		5,51,328,8,51,10,51,12,51,331,9,51,1,51,1,51,3,51,335,8,51,3,51,337,8,
		51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,4,55,346,8,55,11,55,12,55,347,1,
		56,4,56,351,8,56,11,56,12,56,352,1,56,3,56,356,8,56,0,0,57,1,1,3,2,5,3,
		7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,0,35,0,37,17,39,18,41,0,43,0,45,19,47,0,49,20,51,0,53,0,55,0,57,0,59,
		0,61,21,63,22,65,23,67,24,69,25,71,26,73,27,75,28,77,29,79,30,81,31,83,
		32,85,33,87,34,89,35,91,36,93,37,95,38,97,39,99,40,101,41,103,42,105,0,
		107,0,109,0,111,0,113,0,1,0,6,2,0,10,10,13,13,1,0,34,34,2,0,65,90,97,122,
		1,0,48,57,2,0,46,46,95,95,2,0,9,9,32,32,364,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,45,1,0,0,
		0,0,49,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
		1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
		0,0,0,103,1,0,0,0,1,115,1,0,0,0,3,117,1,0,0,0,5,119,1,0,0,0,7,128,1,0,
		0,0,9,135,1,0,0,0,11,142,1,0,0,0,13,152,1,0,0,0,15,158,1,0,0,0,17,168,
		1,0,0,0,19,171,1,0,0,0,21,174,1,0,0,0,23,180,1,0,0,0,25,185,1,0,0,0,27,
		190,1,0,0,0,29,194,1,0,0,0,31,199,1,0,0,0,33,204,1,0,0,0,35,209,1,0,0,
		0,37,217,1,0,0,0,39,221,1,0,0,0,41,223,1,0,0,0,43,225,1,0,0,0,45,227,1,
		0,0,0,47,229,1,0,0,0,49,235,1,0,0,0,51,237,1,0,0,0,53,239,1,0,0,0,55,242,
		1,0,0,0,57,244,1,0,0,0,59,247,1,0,0,0,61,255,1,0,0,0,63,257,1,0,0,0,65,
		260,1,0,0,0,67,262,1,0,0,0,69,264,1,0,0,0,71,267,1,0,0,0,73,269,1,0,0,
		0,75,271,1,0,0,0,77,273,1,0,0,0,79,275,1,0,0,0,81,277,1,0,0,0,83,279,1,
		0,0,0,85,281,1,0,0,0,87,283,1,0,0,0,89,285,1,0,0,0,91,287,1,0,0,0,93,289,
		1,0,0,0,95,294,1,0,0,0,97,298,1,0,0,0,99,308,1,0,0,0,101,312,1,0,0,0,103,
		336,1,0,0,0,105,338,1,0,0,0,107,340,1,0,0,0,109,342,1,0,0,0,111,345,1,
		0,0,0,113,355,1,0,0,0,115,116,5,13,0,0,116,2,1,0,0,0,117,118,5,10,0,0,
		118,4,1,0,0,0,119,120,5,102,0,0,120,121,5,117,0,0,121,122,5,110,0,0,122,
		123,5,99,0,0,123,124,5,116,0,0,124,125,5,105,0,0,125,126,5,111,0,0,126,
		127,5,110,0,0,127,6,1,0,0,0,128,129,5,103,0,0,129,130,5,108,0,0,130,131,
		5,111,0,0,131,132,5,98,0,0,132,133,5,97,0,0,133,134,5,108,0,0,134,8,1,
		0,0,0,135,136,5,114,0,0,136,137,5,101,0,0,137,138,5,116,0,0,138,139,5,
		117,0,0,139,140,5,114,0,0,140,141,5,110,0,0,141,10,1,0,0,0,142,143,5,115,
		0,0,143,144,5,116,0,0,144,145,5,114,0,0,145,146,5,117,0,0,146,147,5,99,
		0,0,147,148,5,116,0,0,148,149,5,117,0,0,149,150,5,114,0,0,150,151,5,101,
		0,0,151,12,1,0,0,0,152,153,5,117,0,0,153,154,5,115,0,0,154,155,5,105,0,
		0,155,156,5,110,0,0,156,157,5,103,0,0,157,14,1,0,0,0,158,159,5,111,0,0,
		159,160,5,112,0,0,160,161,5,104,0,0,161,162,5,97,0,0,162,163,5,110,0,0,
		163,164,5,100,0,0,164,165,5,108,0,0,165,166,5,101,0,0,166,167,5,114,0,
		0,167,16,1,0,0,0,168,169,5,97,0,0,169,170,5,115,0,0,170,18,1,0,0,0,171,
		172,5,105,0,0,172,173,5,102,0,0,173,20,1,0,0,0,174,175,5,119,0,0,175,176,
		5,104,0,0,176,177,5,105,0,0,177,178,5,108,0,0,178,179,5,101,0,0,179,22,
		1,0,0,0,180,181,5,101,0,0,181,182,5,108,0,0,182,183,5,115,0,0,183,184,
		5,101,0,0,184,24,1,0,0,0,185,186,5,101,0,0,186,187,5,108,0,0,187,188,5,
		105,0,0,188,189,5,102,0,0,189,26,1,0,0,0,190,191,5,105,0,0,191,192,5,110,
		0,0,192,193,5,116,0,0,193,28,1,0,0,0,194,195,5,98,0,0,195,196,5,111,0,
		0,196,197,5,111,0,0,197,198,5,108,0,0,198,30,1,0,0,0,199,200,5,110,0,0,
		200,201,5,117,0,0,201,202,5,108,0,0,202,203,5,108,0,0,203,32,1,0,0,0,204,
		205,5,116,0,0,205,206,5,114,0,0,206,207,5,117,0,0,207,208,5,101,0,0,208,
		34,1,0,0,0,209,210,5,102,0,0,210,211,5,97,0,0,211,212,5,108,0,0,212,213,
		5,115,0,0,213,214,5,101,0,0,214,36,1,0,0,0,215,218,3,33,16,0,216,218,3,
		35,17,0,217,215,1,0,0,0,217,216,1,0,0,0,218,38,1,0,0,0,219,222,3,61,30,
		0,220,222,3,49,24,0,221,219,1,0,0,0,221,220,1,0,0,0,222,40,1,0,0,0,223,
		224,5,43,0,0,224,42,1,0,0,0,225,226,5,45,0,0,226,44,1,0,0,0,227,228,5,
		42,0,0,228,46,1,0,0,0,229,230,5,47,0,0,230,48,1,0,0,0,231,236,3,41,20,
		0,232,236,3,43,21,0,233,236,3,45,22,0,234,236,3,47,23,0,235,231,1,0,0,
		0,235,232,1,0,0,0,235,233,1,0,0,0,235,234,1,0,0,0,236,50,1,0,0,0,237,238,
		5,60,0,0,238,52,1,0,0,0,239,240,5,60,0,0,240,241,5,61,0,0,241,54,1,0,0,
		0,242,243,5,62,0,0,243,56,1,0,0,0,244,245,5,62,0,0,245,246,5,61,0,0,246,
		58,1,0,0,0,247,248,5,61,0,0,248,249,5,61,0,0,249,60,1,0,0,0,250,256,3,
		51,25,0,251,256,3,53,26,0,252,256,3,55,27,0,253,256,3,57,28,0,254,256,
		3,59,29,0,255,250,1,0,0,0,255,251,1,0,0,0,255,252,1,0,0,0,255,253,1,0,
		0,0,255,254,1,0,0,0,256,62,1,0,0,0,257,258,5,45,0,0,258,259,5,62,0,0,259,
		64,1,0,0,0,260,261,5,126,0,0,261,66,1,0,0,0,262,263,5,61,0,0,263,68,1,
		0,0,0,264,265,5,42,0,0,265,266,5,61,0,0,266,70,1,0,0,0,267,268,5,40,0,
		0,268,72,1,0,0,0,269,270,5,41,0,0,270,74,1,0,0,0,271,272,5,91,0,0,272,
		76,1,0,0,0,273,274,5,93,0,0,274,78,1,0,0,0,275,276,5,123,0,0,276,80,1,
		0,0,0,277,278,5,125,0,0,278,82,1,0,0,0,279,280,5,44,0,0,280,84,1,0,0,0,
		281,282,5,46,0,0,282,86,1,0,0,0,283,284,5,59,0,0,284,88,1,0,0,0,285,286,
		5,95,0,0,286,90,1,0,0,0,287,288,5,35,0,0,288,92,1,0,0,0,289,290,5,34,0,
		0,290,94,1,0,0,0,291,295,3,111,55,0,292,295,3,113,56,0,293,295,3,97,48,
		0,294,291,1,0,0,0,294,292,1,0,0,0,294,293,1,0,0,0,295,296,1,0,0,0,296,
		297,6,47,0,0,297,96,1,0,0,0,298,299,5,47,0,0,299,300,5,47,0,0,300,304,
		1,0,0,0,301,303,8,0,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,
		0,304,305,1,0,0,0,305,98,1,0,0,0,306,304,1,0,0,0,307,309,3,107,53,0,308,
		307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,100,1,
		0,0,0,312,316,3,93,46,0,313,315,8,1,0,0,314,313,1,0,0,0,315,318,1,0,0,
		0,316,314,1,0,0,0,316,317,1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,
		320,3,93,46,0,320,102,1,0,0,0,321,337,3,105,52,0,322,329,3,105,52,0,323,
		328,3,105,52,0,324,328,3,99,49,0,325,328,3,89,44,0,326,328,3,85,42,0,327,
		323,1,0,0,0,327,324,1,0,0,0,327,325,1,0,0,0,327,326,1,0,0,0,328,331,1,
		0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,334,1,0,0,0,331,329,1,0,0,0,
		332,335,3,105,52,0,333,335,3,99,49,0,334,332,1,0,0,0,334,333,1,0,0,0,335,
		337,1,0,0,0,336,321,1,0,0,0,336,322,1,0,0,0,337,104,1,0,0,0,338,339,7,
		2,0,0,339,106,1,0,0,0,340,341,7,3,0,0,341,108,1,0,0,0,342,343,7,4,0,0,
		343,110,1,0,0,0,344,346,7,5,0,0,345,344,1,0,0,0,346,347,1,0,0,0,347,345,
		1,0,0,0,347,348,1,0,0,0,348,112,1,0,0,0,349,351,7,0,0,0,350,349,1,0,0,
		0,351,352,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,356,1,0,0,0,354,
		356,5,0,0,1,355,350,1,0,0,0,355,354,1,0,0,0,356,114,1,0,0,0,16,0,217,221,
		235,255,294,304,310,316,327,329,334,336,347,352,355,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
