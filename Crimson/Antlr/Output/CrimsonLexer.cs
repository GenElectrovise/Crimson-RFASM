//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Function=3, Global=4, Return=5, Allocate=6, Structure=7, 
		Using=8, As=9, If=10, Else=11, Elif=12, Integer=13, Boolean=14, Null=15, 
		BooleanValue=16, Comparator=17, Tilda=18, Equals=19, OpenBracket=20, CloseBracket=21, 
		OpenSquare=22, CloseSquare=23, OpenBrace=24, CloseBrace=25, Comma=26, 
		Dot=27, SemiColon=28, Underscore=29, Hashtag=30, Quote=31, SkipTokens=32, 
		LineComment=33, Number=34, String=35, Identifier=36;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "Function", "Global", "Return", "Allocate", "Structure", 
		"Using", "As", "If", "Else", "Elif", "Integer", "Boolean", "Null", "True", 
		"False", "BooleanValue", "Less", "LessEqual", "Greater", "GreaterEqual", 
		"EqualTo", "Comparator", "Tilda", "Equals", "OpenBracket", "CloseBracket", 
		"OpenSquare", "CloseSquare", "OpenBrace", "CloseBrace", "Comma", "Dot", 
		"SemiColon", "Underscore", "Hashtag", "Quote", "SkipTokens", "LineComment", 
		"Number", "String", "Identifier", "Alphabetic", "Digit", "Punctuation", 
		"WhiteSpace", "Newline"
	};


	public CrimsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CrimsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", "'function'", "'global'", "'return'", "'allocate'", 
		"'structure'", "'using'", "'as'", "'if'", "'else'", "'elif'", "'int'", 
		"'bool'", "'null'", null, null, "'~'", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "','", "'.'", "';'", "'_'", "'#'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Function", "Global", "Return", "Allocate", "Structure", 
		"Using", "As", "If", "Else", "Elif", "Integer", "Boolean", "Null", "BooleanValue", 
		"Comparator", "Tilda", "Equals", "OpenBracket", "CloseBracket", "OpenSquare", 
		"CloseSquare", "OpenBrace", "CloseBrace", "Comma", "Dot", "SemiColon", 
		"Underscore", "Hashtag", "Quote", "SkipTokens", "LineComment", "Number", 
		"String", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,36,308,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
		9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,3,17,193,8,17,1,18,1,
		18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,
		23,1,23,1,23,3,23,213,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
		1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
		1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,3,38,246,8,38,1,38,1,38,1,39,1,
		39,1,39,1,39,5,39,254,8,39,10,39,12,39,257,9,39,1,40,4,40,260,8,40,11,
		40,12,40,261,1,41,1,41,5,41,266,8,41,10,41,12,41,269,9,41,1,41,1,41,1,
		42,1,42,1,42,1,42,1,42,1,42,5,42,279,8,42,10,42,12,42,282,9,42,1,42,1,
		42,3,42,286,8,42,3,42,288,8,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,4,46,
		297,8,46,11,46,12,46,298,1,47,4,47,302,8,47,11,47,12,47,303,1,47,3,47,
		307,8,47,0,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,0,33,0,35,16,37,0,39,0,41,0,43,0,45,0,47,17,49,
		18,51,19,53,20,55,21,57,22,59,23,61,24,63,25,65,26,67,27,69,28,71,29,73,
		30,75,31,77,32,79,33,81,34,83,35,85,36,87,0,89,0,91,0,93,0,95,0,1,0,6,
		2,0,10,10,13,13,1,0,34,34,2,0,65,90,97,122,1,0,48,57,2,0,46,46,95,95,2,
		0,9,9,32,32,314,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,35,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,97,1,0,0,0,3,99,
		1,0,0,0,5,101,1,0,0,0,7,110,1,0,0,0,9,117,1,0,0,0,11,124,1,0,0,0,13,133,
		1,0,0,0,15,143,1,0,0,0,17,149,1,0,0,0,19,152,1,0,0,0,21,155,1,0,0,0,23,
		160,1,0,0,0,25,165,1,0,0,0,27,169,1,0,0,0,29,174,1,0,0,0,31,179,1,0,0,
		0,33,184,1,0,0,0,35,192,1,0,0,0,37,194,1,0,0,0,39,196,1,0,0,0,41,199,1,
		0,0,0,43,201,1,0,0,0,45,204,1,0,0,0,47,212,1,0,0,0,49,214,1,0,0,0,51,216,
		1,0,0,0,53,218,1,0,0,0,55,220,1,0,0,0,57,222,1,0,0,0,59,224,1,0,0,0,61,
		226,1,0,0,0,63,228,1,0,0,0,65,230,1,0,0,0,67,232,1,0,0,0,69,234,1,0,0,
		0,71,236,1,0,0,0,73,238,1,0,0,0,75,240,1,0,0,0,77,245,1,0,0,0,79,249,1,
		0,0,0,81,259,1,0,0,0,83,263,1,0,0,0,85,287,1,0,0,0,87,289,1,0,0,0,89,291,
		1,0,0,0,91,293,1,0,0,0,93,296,1,0,0,0,95,306,1,0,0,0,97,98,5,13,0,0,98,
		2,1,0,0,0,99,100,5,10,0,0,100,4,1,0,0,0,101,102,5,102,0,0,102,103,5,117,
		0,0,103,104,5,110,0,0,104,105,5,99,0,0,105,106,5,116,0,0,106,107,5,105,
		0,0,107,108,5,111,0,0,108,109,5,110,0,0,109,6,1,0,0,0,110,111,5,103,0,
		0,111,112,5,108,0,0,112,113,5,111,0,0,113,114,5,98,0,0,114,115,5,97,0,
		0,115,116,5,108,0,0,116,8,1,0,0,0,117,118,5,114,0,0,118,119,5,101,0,0,
		119,120,5,116,0,0,120,121,5,117,0,0,121,122,5,114,0,0,122,123,5,110,0,
		0,123,10,1,0,0,0,124,125,5,97,0,0,125,126,5,108,0,0,126,127,5,108,0,0,
		127,128,5,111,0,0,128,129,5,99,0,0,129,130,5,97,0,0,130,131,5,116,0,0,
		131,132,5,101,0,0,132,12,1,0,0,0,133,134,5,115,0,0,134,135,5,116,0,0,135,
		136,5,114,0,0,136,137,5,117,0,0,137,138,5,99,0,0,138,139,5,116,0,0,139,
		140,5,117,0,0,140,141,5,114,0,0,141,142,5,101,0,0,142,14,1,0,0,0,143,144,
		5,117,0,0,144,145,5,115,0,0,145,146,5,105,0,0,146,147,5,110,0,0,147,148,
		5,103,0,0,148,16,1,0,0,0,149,150,5,97,0,0,150,151,5,115,0,0,151,18,1,0,
		0,0,152,153,5,105,0,0,153,154,5,102,0,0,154,20,1,0,0,0,155,156,5,101,0,
		0,156,157,5,108,0,0,157,158,5,115,0,0,158,159,5,101,0,0,159,22,1,0,0,0,
		160,161,5,101,0,0,161,162,5,108,0,0,162,163,5,105,0,0,163,164,5,102,0,
		0,164,24,1,0,0,0,165,166,5,105,0,0,166,167,5,110,0,0,167,168,5,116,0,0,
		168,26,1,0,0,0,169,170,5,98,0,0,170,171,5,111,0,0,171,172,5,111,0,0,172,
		173,5,108,0,0,173,28,1,0,0,0,174,175,5,110,0,0,175,176,5,117,0,0,176,177,
		5,108,0,0,177,178,5,108,0,0,178,30,1,0,0,0,179,180,5,116,0,0,180,181,5,
		114,0,0,181,182,5,117,0,0,182,183,5,101,0,0,183,32,1,0,0,0,184,185,5,102,
		0,0,185,186,5,97,0,0,186,187,5,108,0,0,187,188,5,115,0,0,188,189,5,101,
		0,0,189,34,1,0,0,0,190,193,3,31,15,0,191,193,3,33,16,0,192,190,1,0,0,0,
		192,191,1,0,0,0,193,36,1,0,0,0,194,195,5,60,0,0,195,38,1,0,0,0,196,197,
		5,60,0,0,197,198,5,61,0,0,198,40,1,0,0,0,199,200,5,62,0,0,200,42,1,0,0,
		0,201,202,5,62,0,0,202,203,5,61,0,0,203,44,1,0,0,0,204,205,5,61,0,0,205,
		206,5,61,0,0,206,46,1,0,0,0,207,213,3,37,18,0,208,213,3,39,19,0,209,213,
		3,41,20,0,210,213,3,43,21,0,211,213,3,45,22,0,212,207,1,0,0,0,212,208,
		1,0,0,0,212,209,1,0,0,0,212,210,1,0,0,0,212,211,1,0,0,0,213,48,1,0,0,0,
		214,215,5,126,0,0,215,50,1,0,0,0,216,217,5,61,0,0,217,52,1,0,0,0,218,219,
		5,40,0,0,219,54,1,0,0,0,220,221,5,41,0,0,221,56,1,0,0,0,222,223,5,91,0,
		0,223,58,1,0,0,0,224,225,5,93,0,0,225,60,1,0,0,0,226,227,5,123,0,0,227,
		62,1,0,0,0,228,229,5,125,0,0,229,64,1,0,0,0,230,231,5,44,0,0,231,66,1,
		0,0,0,232,233,5,46,0,0,233,68,1,0,0,0,234,235,5,59,0,0,235,70,1,0,0,0,
		236,237,5,95,0,0,237,72,1,0,0,0,238,239,5,35,0,0,239,74,1,0,0,0,240,241,
		5,34,0,0,241,76,1,0,0,0,242,246,3,93,46,0,243,246,3,95,47,0,244,246,3,
		79,39,0,245,242,1,0,0,0,245,243,1,0,0,0,245,244,1,0,0,0,246,247,1,0,0,
		0,247,248,6,38,0,0,248,78,1,0,0,0,249,250,5,47,0,0,250,251,5,47,0,0,251,
		255,1,0,0,0,252,254,8,0,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,
		0,0,0,255,256,1,0,0,0,256,80,1,0,0,0,257,255,1,0,0,0,258,260,3,89,44,0,
		259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,82,
		1,0,0,0,263,267,3,75,37,0,264,266,8,1,0,0,265,264,1,0,0,0,266,269,1,0,
		0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,
		271,3,75,37,0,271,84,1,0,0,0,272,288,3,87,43,0,273,280,3,87,43,0,274,279,
		3,87,43,0,275,279,3,81,40,0,276,279,3,71,35,0,277,279,3,67,33,0,278,274,
		1,0,0,0,278,275,1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,282,1,0,0,
		0,280,278,1,0,0,0,280,281,1,0,0,0,281,285,1,0,0,0,282,280,1,0,0,0,283,
		286,3,87,43,0,284,286,3,81,40,0,285,283,1,0,0,0,285,284,1,0,0,0,286,288,
		1,0,0,0,287,272,1,0,0,0,287,273,1,0,0,0,288,86,1,0,0,0,289,290,7,2,0,0,
		290,88,1,0,0,0,291,292,7,3,0,0,292,90,1,0,0,0,293,294,7,4,0,0,294,92,1,
		0,0,0,295,297,7,5,0,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,
		298,299,1,0,0,0,299,94,1,0,0,0,300,302,7,0,0,0,301,300,1,0,0,0,302,303,
		1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,307,1,0,0,0,305,307,5,0,0,
		1,306,301,1,0,0,0,306,305,1,0,0,0,307,96,1,0,0,0,14,0,192,212,245,255,
		261,267,278,280,285,287,298,303,306,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
