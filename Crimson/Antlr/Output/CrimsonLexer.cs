//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Function=3, Global=4, Return=5, Structure=6, Using=7, 
		As=8, If=9, While=10, Else=11, Elif=12, Integer=13, Boolean=14, Pointer=15, 
		Null=16, BooleanValue=17, Comparator=18, Tilda=19, DirectEquals=20, PointerEquals=21, 
		OpenBracket=22, CloseBracket=23, OpenSquare=24, CloseSquare=25, OpenBrace=26, 
		CloseBrace=27, Comma=28, Dot=29, SemiColon=30, Underscore=31, Hashtag=32, 
		Quote=33, Plus=34, Minus=35, Asterisk=36, Slash=37, SkipTokens=38, LineComment=39, 
		Number=40, String=41, Identifier=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "Function", "Global", "Return", "Structure", "Using", 
		"As", "If", "While", "Else", "Elif", "Integer", "Boolean", "Pointer", 
		"Null", "True", "False", "BooleanValue", "Less", "LessEqual", "Greater", 
		"GreaterEqual", "EqualTo", "Comparator", "Tilda", "DirectEquals", "PointerEquals", 
		"OpenBracket", "CloseBracket", "OpenSquare", "CloseSquare", "OpenBrace", 
		"CloseBrace", "Comma", "Dot", "SemiColon", "Underscore", "Hashtag", "Quote", 
		"Plus", "Minus", "Asterisk", "Slash", "SkipTokens", "LineComment", "Number", 
		"String", "Identifier", "Alphabetic", "Digit", "Punctuation", "WhiteSpace", 
		"Newline"
	};


	public CrimsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CrimsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", "'function'", "'global'", "'return'", "'structure'", 
		"'using'", "'as'", "'if'", "'while'", "'else'", "'elif'", "'int'", "'bool'", 
		"'ptr'", "'null'", null, null, "'~'", "'='", "'*='", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "','", "'.'", "';'", "'_'", "'#'", "'\"'", "'+'", 
		"'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Function", "Global", "Return", "Structure", "Using", 
		"As", "If", "While", "Else", "Elif", "Integer", "Boolean", "Pointer", 
		"Null", "BooleanValue", "Comparator", "Tilda", "DirectEquals", "PointerEquals", 
		"OpenBracket", "CloseBracket", "OpenSquare", "CloseSquare", "OpenBrace", 
		"CloseBrace", "Comma", "Dot", "SemiColon", "Underscore", "Hashtag", "Quote", 
		"Plus", "Minus", "Asterisk", "Slash", "SkipTokens", "LineComment", "Number", 
		"String", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,332,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
		10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
		13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
		16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,3,18,206,8,18,1,19,1,19,
		1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,24,3,24,226,8,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,
		29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,
		36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
		43,1,43,1,44,1,44,1,44,3,44,270,8,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,
		278,8,45,10,45,12,45,281,9,45,1,46,4,46,284,8,46,11,46,12,46,285,1,47,
		1,47,5,47,290,8,47,10,47,12,47,293,9,47,1,47,1,47,1,48,1,48,1,48,1,48,
		1,48,1,48,5,48,303,8,48,10,48,12,48,306,9,48,1,48,1,48,3,48,310,8,48,3,
		48,312,8,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,4,52,321,8,52,11,52,12,
		52,322,1,53,4,53,326,8,53,11,53,12,53,327,1,53,3,53,331,8,53,0,0,54,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
		15,31,16,33,0,35,0,37,17,39,0,41,0,43,0,45,0,47,0,49,18,51,19,53,20,55,
		21,57,22,59,23,61,24,63,25,65,26,67,27,69,28,71,29,73,30,75,31,77,32,79,
		33,81,34,83,35,85,36,87,37,89,38,91,39,93,40,95,41,97,42,99,0,101,0,103,
		0,105,0,107,0,1,0,6,2,0,10,10,13,13,1,0,34,34,2,0,65,90,97,122,1,0,48,
		57,2,0,46,46,95,95,2,0,9,9,32,32,338,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
		0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,37,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
		1,0,0,0,1,109,1,0,0,0,3,111,1,0,0,0,5,113,1,0,0,0,7,122,1,0,0,0,9,129,
		1,0,0,0,11,136,1,0,0,0,13,146,1,0,0,0,15,152,1,0,0,0,17,155,1,0,0,0,19,
		158,1,0,0,0,21,164,1,0,0,0,23,169,1,0,0,0,25,174,1,0,0,0,27,178,1,0,0,
		0,29,183,1,0,0,0,31,187,1,0,0,0,33,192,1,0,0,0,35,197,1,0,0,0,37,205,1,
		0,0,0,39,207,1,0,0,0,41,209,1,0,0,0,43,212,1,0,0,0,45,214,1,0,0,0,47,217,
		1,0,0,0,49,225,1,0,0,0,51,227,1,0,0,0,53,229,1,0,0,0,55,231,1,0,0,0,57,
		234,1,0,0,0,59,236,1,0,0,0,61,238,1,0,0,0,63,240,1,0,0,0,65,242,1,0,0,
		0,67,244,1,0,0,0,69,246,1,0,0,0,71,248,1,0,0,0,73,250,1,0,0,0,75,252,1,
		0,0,0,77,254,1,0,0,0,79,256,1,0,0,0,81,258,1,0,0,0,83,260,1,0,0,0,85,262,
		1,0,0,0,87,264,1,0,0,0,89,269,1,0,0,0,91,273,1,0,0,0,93,283,1,0,0,0,95,
		287,1,0,0,0,97,311,1,0,0,0,99,313,1,0,0,0,101,315,1,0,0,0,103,317,1,0,
		0,0,105,320,1,0,0,0,107,330,1,0,0,0,109,110,5,13,0,0,110,2,1,0,0,0,111,
		112,5,10,0,0,112,4,1,0,0,0,113,114,5,102,0,0,114,115,5,117,0,0,115,116,
		5,110,0,0,116,117,5,99,0,0,117,118,5,116,0,0,118,119,5,105,0,0,119,120,
		5,111,0,0,120,121,5,110,0,0,121,6,1,0,0,0,122,123,5,103,0,0,123,124,5,
		108,0,0,124,125,5,111,0,0,125,126,5,98,0,0,126,127,5,97,0,0,127,128,5,
		108,0,0,128,8,1,0,0,0,129,130,5,114,0,0,130,131,5,101,0,0,131,132,5,116,
		0,0,132,133,5,117,0,0,133,134,5,114,0,0,134,135,5,110,0,0,135,10,1,0,0,
		0,136,137,5,115,0,0,137,138,5,116,0,0,138,139,5,114,0,0,139,140,5,117,
		0,0,140,141,5,99,0,0,141,142,5,116,0,0,142,143,5,117,0,0,143,144,5,114,
		0,0,144,145,5,101,0,0,145,12,1,0,0,0,146,147,5,117,0,0,147,148,5,115,0,
		0,148,149,5,105,0,0,149,150,5,110,0,0,150,151,5,103,0,0,151,14,1,0,0,0,
		152,153,5,97,0,0,153,154,5,115,0,0,154,16,1,0,0,0,155,156,5,105,0,0,156,
		157,5,102,0,0,157,18,1,0,0,0,158,159,5,119,0,0,159,160,5,104,0,0,160,161,
		5,105,0,0,161,162,5,108,0,0,162,163,5,101,0,0,163,20,1,0,0,0,164,165,5,
		101,0,0,165,166,5,108,0,0,166,167,5,115,0,0,167,168,5,101,0,0,168,22,1,
		0,0,0,169,170,5,101,0,0,170,171,5,108,0,0,171,172,5,105,0,0,172,173,5,
		102,0,0,173,24,1,0,0,0,174,175,5,105,0,0,175,176,5,110,0,0,176,177,5,116,
		0,0,177,26,1,0,0,0,178,179,5,98,0,0,179,180,5,111,0,0,180,181,5,111,0,
		0,181,182,5,108,0,0,182,28,1,0,0,0,183,184,5,112,0,0,184,185,5,116,0,0,
		185,186,5,114,0,0,186,30,1,0,0,0,187,188,5,110,0,0,188,189,5,117,0,0,189,
		190,5,108,0,0,190,191,5,108,0,0,191,32,1,0,0,0,192,193,5,116,0,0,193,194,
		5,114,0,0,194,195,5,117,0,0,195,196,5,101,0,0,196,34,1,0,0,0,197,198,5,
		102,0,0,198,199,5,97,0,0,199,200,5,108,0,0,200,201,5,115,0,0,201,202,5,
		101,0,0,202,36,1,0,0,0,203,206,3,33,16,0,204,206,3,35,17,0,205,203,1,0,
		0,0,205,204,1,0,0,0,206,38,1,0,0,0,207,208,5,60,0,0,208,40,1,0,0,0,209,
		210,5,60,0,0,210,211,5,61,0,0,211,42,1,0,0,0,212,213,5,62,0,0,213,44,1,
		0,0,0,214,215,5,62,0,0,215,216,5,61,0,0,216,46,1,0,0,0,217,218,5,61,0,
		0,218,219,5,61,0,0,219,48,1,0,0,0,220,226,3,39,19,0,221,226,3,41,20,0,
		222,226,3,43,21,0,223,226,3,45,22,0,224,226,3,47,23,0,225,220,1,0,0,0,
		225,221,1,0,0,0,225,222,1,0,0,0,225,223,1,0,0,0,225,224,1,0,0,0,226,50,
		1,0,0,0,227,228,5,126,0,0,228,52,1,0,0,0,229,230,5,61,0,0,230,54,1,0,0,
		0,231,232,5,42,0,0,232,233,5,61,0,0,233,56,1,0,0,0,234,235,5,40,0,0,235,
		58,1,0,0,0,236,237,5,41,0,0,237,60,1,0,0,0,238,239,5,91,0,0,239,62,1,0,
		0,0,240,241,5,93,0,0,241,64,1,0,0,0,242,243,5,123,0,0,243,66,1,0,0,0,244,
		245,5,125,0,0,245,68,1,0,0,0,246,247,5,44,0,0,247,70,1,0,0,0,248,249,5,
		46,0,0,249,72,1,0,0,0,250,251,5,59,0,0,251,74,1,0,0,0,252,253,5,95,0,0,
		253,76,1,0,0,0,254,255,5,35,0,0,255,78,1,0,0,0,256,257,5,34,0,0,257,80,
		1,0,0,0,258,259,5,43,0,0,259,82,1,0,0,0,260,261,5,45,0,0,261,84,1,0,0,
		0,262,263,5,42,0,0,263,86,1,0,0,0,264,265,5,47,0,0,265,88,1,0,0,0,266,
		270,3,105,52,0,267,270,3,107,53,0,268,270,3,91,45,0,269,266,1,0,0,0,269,
		267,1,0,0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,272,6,44,0,0,272,90,1,
		0,0,0,273,274,5,47,0,0,274,275,5,47,0,0,275,279,1,0,0,0,276,278,8,0,0,
		0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,
		92,1,0,0,0,281,279,1,0,0,0,282,284,3,101,50,0,283,282,1,0,0,0,284,285,
		1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,94,1,0,0,0,287,291,3,79,39,
		0,288,290,8,1,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,
		292,1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,295,3,79,39,0,295,96,1,
		0,0,0,296,312,3,99,49,0,297,304,3,99,49,0,298,303,3,99,49,0,299,303,3,
		93,46,0,300,303,3,75,37,0,301,303,3,71,35,0,302,298,1,0,0,0,302,299,1,
		0,0,0,302,300,1,0,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,
		304,305,1,0,0,0,305,309,1,0,0,0,306,304,1,0,0,0,307,310,3,99,49,0,308,
		310,3,93,46,0,309,307,1,0,0,0,309,308,1,0,0,0,310,312,1,0,0,0,311,296,
		1,0,0,0,311,297,1,0,0,0,312,98,1,0,0,0,313,314,7,2,0,0,314,100,1,0,0,0,
		315,316,7,3,0,0,316,102,1,0,0,0,317,318,7,4,0,0,318,104,1,0,0,0,319,321,
		7,5,0,0,320,319,1,0,0,0,321,322,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,
		0,323,106,1,0,0,0,324,326,7,0,0,0,325,324,1,0,0,0,326,327,1,0,0,0,327,
		325,1,0,0,0,327,328,1,0,0,0,328,331,1,0,0,0,329,331,5,0,0,1,330,325,1,
		0,0,0,330,329,1,0,0,0,331,108,1,0,0,0,14,0,205,225,269,279,285,291,302,
		304,309,311,322,327,330,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
