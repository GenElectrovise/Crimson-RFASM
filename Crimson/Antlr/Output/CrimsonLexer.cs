//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Allocator=3, Function=4, Global=5, Return=6, Structure=7, 
		Using=8, OpHandler=9, As=10, If=11, While=12, Else=13, Elif=14, Integer=15, 
		Boolean=16, Null=17, BooleanValue=18, Operator=19, Asterisk=20, MathsOperator=21, 
		Comparator=22, RightArrow=23, BasicCall=24, AssemblyCall=25, DirectEquals=26, 
		PointerEquals=27, OpenBracket=28, CloseBracket=29, OpenSquare=30, CloseSquare=31, 
		OpenBrace=32, CloseBrace=33, Comma=34, Dot=35, SemiColon=36, Underscore=37, 
		Hashtag=38, Quote=39, SkipTokens=40, LineComment=41, BlockComment=42, 
		Number=43, String=44, ShortName=45;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "Allocator", "Function", "Global", "Return", "Structure", 
		"Using", "OpHandler", "As", "If", "While", "Else", "Elif", "Integer", 
		"Boolean", "Null", "True", "False", "BooleanValue", "Operator", "Plus", 
		"Minus", "Asterisk", "Slash", "MathsOperator", "Less", "LessEqual", "Greater", 
		"GreaterEqual", "EqualTo", "Comparator", "RightArrow", "BasicCall", "AssemblyCall", 
		"DirectEquals", "PointerEquals", "OpenBracket", "CloseBracket", "OpenSquare", 
		"CloseSquare", "OpenBrace", "CloseBrace", "Comma", "Dot", "SemiColon", 
		"Underscore", "Hashtag", "Quote", "SkipTokens", "LineComment", "BlockComment", 
		"Number", "String", "ShortName", "Alphabetic", "Digit", "Punctuation", 
		"WhiteSpace", "Newline"
	};


	public CrimsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CrimsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", "'allocator'", "'function'", "'global'", "'return'", 
		"'structure'", "'using'", "'ophandler'", "'as'", "'if'", "'while'", "'else'", 
		"'elif'", "'int'", "'bool'", "'null'", null, null, "'*'", null, null, 
		"'->'", "'B~'", "'A~'", "'='", "'*='", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "','", "'.'", "';'", "'_'", "'#'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Allocator", "Function", "Global", "Return", "Structure", 
		"Using", "OpHandler", "As", "If", "While", "Else", "Elif", "Integer", 
		"Boolean", "Null", "BooleanValue", "Operator", "Asterisk", "MathsOperator", 
		"Comparator", "RightArrow", "BasicCall", "AssemblyCall", "DirectEquals", 
		"PointerEquals", "OpenBracket", "CloseBracket", "OpenSquare", "CloseSquare", 
		"OpenBrace", "CloseBrace", "Comma", "Dot", "SemiColon", "Underscore", 
		"Hashtag", "Quote", "SkipTokens", "LineComment", "BlockComment", "Number", 
		"String", "ShortName"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,45,382,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
		12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,
		15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
		18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,3,19,234,8,19,1,20,1,20,3,20,238,
		8,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,3,25,
		252,8,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
		30,1,31,1,31,1,31,1,31,1,31,3,31,272,8,31,1,32,1,32,1,32,1,33,1,33,1,33,
		1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,
		1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,
		1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,49,3,49,316,8,49,1,49,1,49,1,50,1,
		50,1,50,1,50,5,50,324,8,50,10,50,12,50,327,9,50,1,51,1,51,1,51,1,51,5,
		51,333,8,51,10,51,12,51,336,9,51,1,51,1,51,1,51,1,52,4,52,342,8,52,11,
		52,12,52,343,1,53,1,53,5,53,348,8,53,10,53,12,53,351,9,53,1,53,1,53,1,
		54,1,54,1,54,1,54,5,54,359,8,54,10,54,12,54,362,9,54,1,55,1,55,1,56,1,
		56,1,57,1,57,1,58,4,58,371,8,58,11,58,12,58,372,1,59,4,59,376,8,59,11,
		59,12,59,377,1,59,3,59,381,8,59,1,334,0,60,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,0,37,0,
		39,18,41,19,43,0,45,0,47,20,49,0,51,21,53,0,55,0,57,0,59,0,61,0,63,22,
		65,23,67,24,69,25,71,26,73,27,75,28,77,29,79,30,81,31,83,32,85,33,87,34,
		89,35,91,36,93,37,95,38,97,39,99,40,101,41,103,42,105,43,107,44,109,45,
		111,0,113,0,115,0,117,0,119,0,1,0,6,2,0,10,10,13,13,1,0,34,34,2,0,65,90,
		97,122,1,0,48,57,2,0,46,46,95,95,2,0,9,9,32,32,388,0,1,1,0,0,0,0,3,1,0,
		0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,47,1,0,0,0,0,51,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
		0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
		1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,1,121,
		1,0,0,0,3,123,1,0,0,0,5,125,1,0,0,0,7,135,1,0,0,0,9,144,1,0,0,0,11,151,
		1,0,0,0,13,158,1,0,0,0,15,168,1,0,0,0,17,174,1,0,0,0,19,184,1,0,0,0,21,
		187,1,0,0,0,23,190,1,0,0,0,25,196,1,0,0,0,27,201,1,0,0,0,29,206,1,0,0,
		0,31,210,1,0,0,0,33,215,1,0,0,0,35,220,1,0,0,0,37,225,1,0,0,0,39,233,1,
		0,0,0,41,237,1,0,0,0,43,239,1,0,0,0,45,241,1,0,0,0,47,243,1,0,0,0,49,245,
		1,0,0,0,51,251,1,0,0,0,53,253,1,0,0,0,55,255,1,0,0,0,57,258,1,0,0,0,59,
		260,1,0,0,0,61,263,1,0,0,0,63,271,1,0,0,0,65,273,1,0,0,0,67,276,1,0,0,
		0,69,279,1,0,0,0,71,282,1,0,0,0,73,284,1,0,0,0,75,287,1,0,0,0,77,289,1,
		0,0,0,79,291,1,0,0,0,81,293,1,0,0,0,83,295,1,0,0,0,85,297,1,0,0,0,87,299,
		1,0,0,0,89,301,1,0,0,0,91,303,1,0,0,0,93,305,1,0,0,0,95,307,1,0,0,0,97,
		309,1,0,0,0,99,315,1,0,0,0,101,319,1,0,0,0,103,328,1,0,0,0,105,341,1,0,
		0,0,107,345,1,0,0,0,109,354,1,0,0,0,111,363,1,0,0,0,113,365,1,0,0,0,115,
		367,1,0,0,0,117,370,1,0,0,0,119,380,1,0,0,0,121,122,5,13,0,0,122,2,1,0,
		0,0,123,124,5,10,0,0,124,4,1,0,0,0,125,126,5,97,0,0,126,127,5,108,0,0,
		127,128,5,108,0,0,128,129,5,111,0,0,129,130,5,99,0,0,130,131,5,97,0,0,
		131,132,5,116,0,0,132,133,5,111,0,0,133,134,5,114,0,0,134,6,1,0,0,0,135,
		136,5,102,0,0,136,137,5,117,0,0,137,138,5,110,0,0,138,139,5,99,0,0,139,
		140,5,116,0,0,140,141,5,105,0,0,141,142,5,111,0,0,142,143,5,110,0,0,143,
		8,1,0,0,0,144,145,5,103,0,0,145,146,5,108,0,0,146,147,5,111,0,0,147,148,
		5,98,0,0,148,149,5,97,0,0,149,150,5,108,0,0,150,10,1,0,0,0,151,152,5,114,
		0,0,152,153,5,101,0,0,153,154,5,116,0,0,154,155,5,117,0,0,155,156,5,114,
		0,0,156,157,5,110,0,0,157,12,1,0,0,0,158,159,5,115,0,0,159,160,5,116,0,
		0,160,161,5,114,0,0,161,162,5,117,0,0,162,163,5,99,0,0,163,164,5,116,0,
		0,164,165,5,117,0,0,165,166,5,114,0,0,166,167,5,101,0,0,167,14,1,0,0,0,
		168,169,5,117,0,0,169,170,5,115,0,0,170,171,5,105,0,0,171,172,5,110,0,
		0,172,173,5,103,0,0,173,16,1,0,0,0,174,175,5,111,0,0,175,176,5,112,0,0,
		176,177,5,104,0,0,177,178,5,97,0,0,178,179,5,110,0,0,179,180,5,100,0,0,
		180,181,5,108,0,0,181,182,5,101,0,0,182,183,5,114,0,0,183,18,1,0,0,0,184,
		185,5,97,0,0,185,186,5,115,0,0,186,20,1,0,0,0,187,188,5,105,0,0,188,189,
		5,102,0,0,189,22,1,0,0,0,190,191,5,119,0,0,191,192,5,104,0,0,192,193,5,
		105,0,0,193,194,5,108,0,0,194,195,5,101,0,0,195,24,1,0,0,0,196,197,5,101,
		0,0,197,198,5,108,0,0,198,199,5,115,0,0,199,200,5,101,0,0,200,26,1,0,0,
		0,201,202,5,101,0,0,202,203,5,108,0,0,203,204,5,105,0,0,204,205,5,102,
		0,0,205,28,1,0,0,0,206,207,5,105,0,0,207,208,5,110,0,0,208,209,5,116,0,
		0,209,30,1,0,0,0,210,211,5,98,0,0,211,212,5,111,0,0,212,213,5,111,0,0,
		213,214,5,108,0,0,214,32,1,0,0,0,215,216,5,110,0,0,216,217,5,117,0,0,217,
		218,5,108,0,0,218,219,5,108,0,0,219,34,1,0,0,0,220,221,5,116,0,0,221,222,
		5,114,0,0,222,223,5,117,0,0,223,224,5,101,0,0,224,36,1,0,0,0,225,226,5,
		102,0,0,226,227,5,97,0,0,227,228,5,108,0,0,228,229,5,115,0,0,229,230,5,
		101,0,0,230,38,1,0,0,0,231,234,3,35,17,0,232,234,3,37,18,0,233,231,1,0,
		0,0,233,232,1,0,0,0,234,40,1,0,0,0,235,238,3,63,31,0,236,238,3,51,25,0,
		237,235,1,0,0,0,237,236,1,0,0,0,238,42,1,0,0,0,239,240,5,43,0,0,240,44,
		1,0,0,0,241,242,5,45,0,0,242,46,1,0,0,0,243,244,5,42,0,0,244,48,1,0,0,
		0,245,246,5,47,0,0,246,50,1,0,0,0,247,252,3,43,21,0,248,252,3,45,22,0,
		249,252,3,47,23,0,250,252,3,49,24,0,251,247,1,0,0,0,251,248,1,0,0,0,251,
		249,1,0,0,0,251,250,1,0,0,0,252,52,1,0,0,0,253,254,5,60,0,0,254,54,1,0,
		0,0,255,256,5,60,0,0,256,257,5,61,0,0,257,56,1,0,0,0,258,259,5,62,0,0,
		259,58,1,0,0,0,260,261,5,62,0,0,261,262,5,61,0,0,262,60,1,0,0,0,263,264,
		5,61,0,0,264,265,5,61,0,0,265,62,1,0,0,0,266,272,3,53,26,0,267,272,3,55,
		27,0,268,272,3,57,28,0,269,272,3,59,29,0,270,272,3,61,30,0,271,266,1,0,
		0,0,271,267,1,0,0,0,271,268,1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,
		64,1,0,0,0,273,274,5,45,0,0,274,275,5,62,0,0,275,66,1,0,0,0,276,277,5,
		66,0,0,277,278,5,126,0,0,278,68,1,0,0,0,279,280,5,65,0,0,280,281,5,126,
		0,0,281,70,1,0,0,0,282,283,5,61,0,0,283,72,1,0,0,0,284,285,5,42,0,0,285,
		286,5,61,0,0,286,74,1,0,0,0,287,288,5,40,0,0,288,76,1,0,0,0,289,290,5,
		41,0,0,290,78,1,0,0,0,291,292,5,91,0,0,292,80,1,0,0,0,293,294,5,93,0,0,
		294,82,1,0,0,0,295,296,5,123,0,0,296,84,1,0,0,0,297,298,5,125,0,0,298,
		86,1,0,0,0,299,300,5,44,0,0,300,88,1,0,0,0,301,302,5,46,0,0,302,90,1,0,
		0,0,303,304,5,59,0,0,304,92,1,0,0,0,305,306,5,95,0,0,306,94,1,0,0,0,307,
		308,5,35,0,0,308,96,1,0,0,0,309,310,5,34,0,0,310,98,1,0,0,0,311,316,3,
		117,58,0,312,316,3,119,59,0,313,316,3,101,50,0,314,316,3,103,51,0,315,
		311,1,0,0,0,315,312,1,0,0,0,315,313,1,0,0,0,315,314,1,0,0,0,316,317,1,
		0,0,0,317,318,6,49,0,0,318,100,1,0,0,0,319,320,5,47,0,0,320,321,5,47,0,
		0,321,325,1,0,0,0,322,324,8,0,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,
		323,1,0,0,0,325,326,1,0,0,0,326,102,1,0,0,0,327,325,1,0,0,0,328,329,5,
		47,0,0,329,330,5,42,0,0,330,334,1,0,0,0,331,333,9,0,0,0,332,331,1,0,0,
		0,333,336,1,0,0,0,334,335,1,0,0,0,334,332,1,0,0,0,335,337,1,0,0,0,336,
		334,1,0,0,0,337,338,5,42,0,0,338,339,5,47,0,0,339,104,1,0,0,0,340,342,
		3,113,56,0,341,340,1,0,0,0,342,343,1,0,0,0,343,341,1,0,0,0,343,344,1,0,
		0,0,344,106,1,0,0,0,345,349,3,97,48,0,346,348,8,1,0,0,347,346,1,0,0,0,
		348,351,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,
		1,0,0,0,352,353,3,97,48,0,353,108,1,0,0,0,354,360,3,111,55,0,355,359,3,
		111,55,0,356,359,3,105,52,0,357,359,3,93,46,0,358,355,1,0,0,0,358,356,
		1,0,0,0,358,357,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,
		0,361,110,1,0,0,0,362,360,1,0,0,0,363,364,7,2,0,0,364,112,1,0,0,0,365,
		366,7,3,0,0,366,114,1,0,0,0,367,368,7,4,0,0,368,116,1,0,0,0,369,371,7,
		5,0,0,370,369,1,0,0,0,371,372,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,
		373,118,1,0,0,0,374,376,7,0,0,0,375,374,1,0,0,0,376,377,1,0,0,0,377,375,
		1,0,0,0,377,378,1,0,0,0,378,381,1,0,0,0,379,381,5,0,0,1,380,375,1,0,0,
		0,380,379,1,0,0,0,381,120,1,0,0,0,15,0,233,237,251,271,315,325,334,343,
		349,358,360,372,377,380,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
