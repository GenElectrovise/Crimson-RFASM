//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Package=1, Function=2, Global=3, Return=4, Allocate=5, Structure=6, If=7, 
		Else=8, Elif=9, Integer=10, Boolean=11, Null=12, BooleanValue=13, Comparator=14, 
		Equals=15, OpenBracket=16, CloseBracket=17, OpenSquare=18, CloseSquare=19, 
		OpenBrace=20, CloseBrace=21, Comma=22, Dot=23, SemiColon=24, Underscore=25, 
		SkipTokens=26, LineComment=27, Number=28, Identifier=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Package", "Function", "Global", "Return", "Allocate", "Structure", "If", 
		"Else", "Elif", "Integer", "Boolean", "Null", "True", "False", "BooleanValue", 
		"Less", "Greater", "EqualTo", "Comparator", "Equals", "OpenBracket", "CloseBracket", 
		"OpenSquare", "CloseSquare", "OpenBrace", "CloseBrace", "Comma", "Dot", 
		"SemiColon", "Underscore", "SkipTokens", "LineComment", "Number", "Identifier", 
		"Alphabetic", "Digit", "Punctuation", "WhiteSpace", "Newline"
	};


	public CrimsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CrimsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'package'", "'function'", "'global'", "'return'", "'allocate'", 
		"'structure'", "'if'", "'else'", "'elif'", "'int'", "'bool'", "'null'", 
		null, null, "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'", 
		"';'", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Package", "Function", "Global", "Return", "Allocate", "Structure", 
		"If", "Else", "Elif", "Integer", "Boolean", "Null", "BooleanValue", "Comparator", 
		"Equals", "OpenBracket", "CloseBracket", "OpenSquare", "CloseSquare", 
		"OpenBrace", "CloseBrace", "Comma", "Dot", "SemiColon", "Underscore", 
		"SkipTokens", "LineComment", "Number", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,262,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,3,14,
		170,8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,3,18,182,8,
		18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
		25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,3,30,209,8,30,
		1,30,1,30,1,31,1,31,1,31,1,31,5,31,217,8,31,10,31,12,31,220,9,31,1,32,
		4,32,223,8,32,11,32,12,32,224,1,33,1,33,1,33,1,33,1,33,1,33,5,33,233,8,
		33,10,33,12,33,236,9,33,1,33,1,33,3,33,240,8,33,3,33,242,8,33,1,34,1,34,
		1,35,1,35,1,36,1,36,1,37,4,37,251,8,37,11,37,12,37,252,1,38,4,38,256,8,
		38,11,38,12,38,257,1,38,3,38,261,8,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,6,
		13,7,15,8,17,9,19,10,21,11,23,12,25,0,27,0,29,13,31,0,33,0,35,0,37,14,
		39,15,41,16,43,17,45,18,47,19,49,20,51,21,53,22,55,23,57,24,59,25,61,26,
		63,27,65,28,67,29,69,0,71,0,73,0,75,0,77,0,1,0,5,2,0,10,10,13,13,2,0,65,
		90,97,122,1,0,48,57,2,0,46,46,95,95,2,0,9,9,32,32,267,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,29,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,1,79,1,0,0,0,3,87,1,0,0,0,5,96,1,0,0,0,7,103,1,0,0,0,9,110,1,0,0,0,11,
		119,1,0,0,0,13,129,1,0,0,0,15,132,1,0,0,0,17,137,1,0,0,0,19,142,1,0,0,
		0,21,146,1,0,0,0,23,151,1,0,0,0,25,156,1,0,0,0,27,161,1,0,0,0,29,169,1,
		0,0,0,31,171,1,0,0,0,33,173,1,0,0,0,35,175,1,0,0,0,37,181,1,0,0,0,39,183,
		1,0,0,0,41,185,1,0,0,0,43,187,1,0,0,0,45,189,1,0,0,0,47,191,1,0,0,0,49,
		193,1,0,0,0,51,195,1,0,0,0,53,197,1,0,0,0,55,199,1,0,0,0,57,201,1,0,0,
		0,59,203,1,0,0,0,61,208,1,0,0,0,63,212,1,0,0,0,65,222,1,0,0,0,67,241,1,
		0,0,0,69,243,1,0,0,0,71,245,1,0,0,0,73,247,1,0,0,0,75,250,1,0,0,0,77,260,
		1,0,0,0,79,80,5,112,0,0,80,81,5,97,0,0,81,82,5,99,0,0,82,83,5,107,0,0,
		83,84,5,97,0,0,84,85,5,103,0,0,85,86,5,101,0,0,86,2,1,0,0,0,87,88,5,102,
		0,0,88,89,5,117,0,0,89,90,5,110,0,0,90,91,5,99,0,0,91,92,5,116,0,0,92,
		93,5,105,0,0,93,94,5,111,0,0,94,95,5,110,0,0,95,4,1,0,0,0,96,97,5,103,
		0,0,97,98,5,108,0,0,98,99,5,111,0,0,99,100,5,98,0,0,100,101,5,97,0,0,101,
		102,5,108,0,0,102,6,1,0,0,0,103,104,5,114,0,0,104,105,5,101,0,0,105,106,
		5,116,0,0,106,107,5,117,0,0,107,108,5,114,0,0,108,109,5,110,0,0,109,8,
		1,0,0,0,110,111,5,97,0,0,111,112,5,108,0,0,112,113,5,108,0,0,113,114,5,
		111,0,0,114,115,5,99,0,0,115,116,5,97,0,0,116,117,5,116,0,0,117,118,5,
		101,0,0,118,10,1,0,0,0,119,120,5,115,0,0,120,121,5,116,0,0,121,122,5,114,
		0,0,122,123,5,117,0,0,123,124,5,99,0,0,124,125,5,116,0,0,125,126,5,117,
		0,0,126,127,5,114,0,0,127,128,5,101,0,0,128,12,1,0,0,0,129,130,5,105,0,
		0,130,131,5,102,0,0,131,14,1,0,0,0,132,133,5,101,0,0,133,134,5,108,0,0,
		134,135,5,115,0,0,135,136,5,101,0,0,136,16,1,0,0,0,137,138,5,101,0,0,138,
		139,5,108,0,0,139,140,5,105,0,0,140,141,5,102,0,0,141,18,1,0,0,0,142,143,
		5,105,0,0,143,144,5,110,0,0,144,145,5,116,0,0,145,20,1,0,0,0,146,147,5,
		98,0,0,147,148,5,111,0,0,148,149,5,111,0,0,149,150,5,108,0,0,150,22,1,
		0,0,0,151,152,5,110,0,0,152,153,5,117,0,0,153,154,5,108,0,0,154,155,5,
		108,0,0,155,24,1,0,0,0,156,157,5,116,0,0,157,158,5,114,0,0,158,159,5,117,
		0,0,159,160,5,101,0,0,160,26,1,0,0,0,161,162,5,102,0,0,162,163,5,97,0,
		0,163,164,5,108,0,0,164,165,5,115,0,0,165,166,5,101,0,0,166,28,1,0,0,0,
		167,170,3,25,12,0,168,170,3,27,13,0,169,167,1,0,0,0,169,168,1,0,0,0,170,
		30,1,0,0,0,171,172,5,60,0,0,172,32,1,0,0,0,173,174,5,62,0,0,174,34,1,0,
		0,0,175,176,5,61,0,0,176,177,5,61,0,0,177,36,1,0,0,0,178,182,3,31,15,0,
		179,182,3,33,16,0,180,182,3,35,17,0,181,178,1,0,0,0,181,179,1,0,0,0,181,
		180,1,0,0,0,182,38,1,0,0,0,183,184,5,61,0,0,184,40,1,0,0,0,185,186,5,40,
		0,0,186,42,1,0,0,0,187,188,5,41,0,0,188,44,1,0,0,0,189,190,5,91,0,0,190,
		46,1,0,0,0,191,192,5,93,0,0,192,48,1,0,0,0,193,194,5,123,0,0,194,50,1,
		0,0,0,195,196,5,125,0,0,196,52,1,0,0,0,197,198,5,44,0,0,198,54,1,0,0,0,
		199,200,5,46,0,0,200,56,1,0,0,0,201,202,5,59,0,0,202,58,1,0,0,0,203,204,
		5,95,0,0,204,60,1,0,0,0,205,209,3,75,37,0,206,209,3,77,38,0,207,209,3,
		63,31,0,208,205,1,0,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,210,1,0,0,
		0,210,211,6,30,0,0,211,62,1,0,0,0,212,213,5,47,0,0,213,214,5,47,0,0,214,
		218,1,0,0,0,215,217,8,0,0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,
		0,0,0,218,219,1,0,0,0,219,64,1,0,0,0,220,218,1,0,0,0,221,223,3,71,35,0,
		222,221,1,0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,66,
		1,0,0,0,226,242,3,69,34,0,227,234,3,69,34,0,228,233,3,69,34,0,229,233,
		3,65,32,0,230,233,3,59,29,0,231,233,3,55,27,0,232,228,1,0,0,0,232,229,
		1,0,0,0,232,230,1,0,0,0,232,231,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,
		0,234,235,1,0,0,0,235,239,1,0,0,0,236,234,1,0,0,0,237,240,3,69,34,0,238,
		240,3,65,32,0,239,237,1,0,0,0,239,238,1,0,0,0,240,242,1,0,0,0,241,226,
		1,0,0,0,241,227,1,0,0,0,242,68,1,0,0,0,243,244,7,1,0,0,244,70,1,0,0,0,
		245,246,7,2,0,0,246,72,1,0,0,0,247,248,7,3,0,0,248,74,1,0,0,0,249,251,
		7,4,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,
		0,253,76,1,0,0,0,254,256,7,0,0,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,
		1,0,0,0,257,258,1,0,0,0,258,261,1,0,0,0,259,261,5,0,0,1,260,255,1,0,0,
		0,260,259,1,0,0,0,261,78,1,0,0,0,13,0,169,181,208,218,224,232,234,239,
		241,252,257,260,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
