//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Function=3, Global=4, Return=5, Allocate=6, Structure=7, 
		Using=8, As=9, If=10, Else=11, Elif=12, Integer=13, Boolean=14, Null=15, 
		BooleanValue=16, Comparator=17, Tilda=18, Equals=19, OpenBracket=20, CloseBracket=21, 
		OpenSquare=22, CloseSquare=23, OpenBrace=24, CloseBrace=25, Comma=26, 
		Dot=27, SemiColon=28, Underscore=29, Hashtag=30, Quote=31, Asterisk=32, 
		Slash=33, SkipTokens=34, LineComment=35, Number=36, String=37, Identifier=38;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "Function", "Global", "Return", "Allocate", "Structure", 
		"Using", "As", "If", "Else", "Elif", "Integer", "Boolean", "Null", "True", 
		"False", "BooleanValue", "Less", "LessEqual", "Greater", "GreaterEqual", 
		"EqualTo", "Comparator", "Tilda", "Equals", "OpenBracket", "CloseBracket", 
		"OpenSquare", "CloseSquare", "OpenBrace", "CloseBrace", "Comma", "Dot", 
		"SemiColon", "Underscore", "Hashtag", "Quote", "Asterisk", "Slash", "SkipTokens", 
		"LineComment", "Number", "String", "Identifier", "Alphabetic", "Digit", 
		"Punctuation", "WhiteSpace", "Newline"
	};


	public CrimsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CrimsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", "'function'", "'global'", "'return'", "'allocate'", 
		"'structure'", "'using'", "'as'", "'if'", "'else'", "'elif'", "'int'", 
		"'bool'", "'null'", null, null, "'~'", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "','", "'.'", "';'", "'_'", "'#'", "'\"'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Function", "Global", "Return", "Allocate", "Structure", 
		"Using", "As", "If", "Else", "Elif", "Integer", "Boolean", "Null", "BooleanValue", 
		"Comparator", "Tilda", "Equals", "OpenBracket", "CloseBracket", "OpenSquare", 
		"CloseSquare", "OpenBrace", "CloseBrace", "Comma", "Dot", "SemiColon", 
		"Underscore", "Hashtag", "Quote", "Asterisk", "Slash", "SkipTokens", "LineComment", 
		"Number", "String", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,38,316,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
		1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
		3,17,197,8,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,
		22,1,22,1,23,1,23,1,23,1,23,1,23,3,23,217,8,23,1,24,1,24,1,25,1,25,1,26,
		1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
		1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
		1,40,1,40,3,40,254,8,40,1,40,1,40,1,41,1,41,1,41,1,41,5,41,262,8,41,10,
		41,12,41,265,9,41,1,42,4,42,268,8,42,11,42,12,42,269,1,43,1,43,5,43,274,
		8,43,10,43,12,43,277,9,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,
		287,8,44,10,44,12,44,290,9,44,1,44,1,44,3,44,294,8,44,3,44,296,8,44,1,
		45,1,45,1,46,1,46,1,47,1,47,1,48,4,48,305,8,48,11,48,12,48,306,1,49,4,
		49,310,8,49,11,49,12,49,311,1,49,3,49,315,8,49,0,0,50,1,1,3,2,5,3,7,4,
		9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,0,33,0,
		35,16,37,0,39,0,41,0,43,0,45,0,47,17,49,18,51,19,53,20,55,21,57,22,59,
		23,61,24,63,25,65,26,67,27,69,28,71,29,73,30,75,31,77,32,79,33,81,34,83,
		35,85,36,87,37,89,38,91,0,93,0,95,0,97,0,99,0,1,0,6,2,0,10,10,13,13,1,
		0,34,34,2,0,65,90,97,122,1,0,48,57,2,0,46,46,95,95,2,0,9,9,32,32,322,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,35,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,101,1,0,
		0,0,3,103,1,0,0,0,5,105,1,0,0,0,7,114,1,0,0,0,9,121,1,0,0,0,11,128,1,0,
		0,0,13,137,1,0,0,0,15,147,1,0,0,0,17,153,1,0,0,0,19,156,1,0,0,0,21,159,
		1,0,0,0,23,164,1,0,0,0,25,169,1,0,0,0,27,173,1,0,0,0,29,178,1,0,0,0,31,
		183,1,0,0,0,33,188,1,0,0,0,35,196,1,0,0,0,37,198,1,0,0,0,39,200,1,0,0,
		0,41,203,1,0,0,0,43,205,1,0,0,0,45,208,1,0,0,0,47,216,1,0,0,0,49,218,1,
		0,0,0,51,220,1,0,0,0,53,222,1,0,0,0,55,224,1,0,0,0,57,226,1,0,0,0,59,228,
		1,0,0,0,61,230,1,0,0,0,63,232,1,0,0,0,65,234,1,0,0,0,67,236,1,0,0,0,69,
		238,1,0,0,0,71,240,1,0,0,0,73,242,1,0,0,0,75,244,1,0,0,0,77,246,1,0,0,
		0,79,248,1,0,0,0,81,253,1,0,0,0,83,257,1,0,0,0,85,267,1,0,0,0,87,271,1,
		0,0,0,89,295,1,0,0,0,91,297,1,0,0,0,93,299,1,0,0,0,95,301,1,0,0,0,97,304,
		1,0,0,0,99,314,1,0,0,0,101,102,5,13,0,0,102,2,1,0,0,0,103,104,5,10,0,0,
		104,4,1,0,0,0,105,106,5,102,0,0,106,107,5,117,0,0,107,108,5,110,0,0,108,
		109,5,99,0,0,109,110,5,116,0,0,110,111,5,105,0,0,111,112,5,111,0,0,112,
		113,5,110,0,0,113,6,1,0,0,0,114,115,5,103,0,0,115,116,5,108,0,0,116,117,
		5,111,0,0,117,118,5,98,0,0,118,119,5,97,0,0,119,120,5,108,0,0,120,8,1,
		0,0,0,121,122,5,114,0,0,122,123,5,101,0,0,123,124,5,116,0,0,124,125,5,
		117,0,0,125,126,5,114,0,0,126,127,5,110,0,0,127,10,1,0,0,0,128,129,5,97,
		0,0,129,130,5,108,0,0,130,131,5,108,0,0,131,132,5,111,0,0,132,133,5,99,
		0,0,133,134,5,97,0,0,134,135,5,116,0,0,135,136,5,101,0,0,136,12,1,0,0,
		0,137,138,5,115,0,0,138,139,5,116,0,0,139,140,5,114,0,0,140,141,5,117,
		0,0,141,142,5,99,0,0,142,143,5,116,0,0,143,144,5,117,0,0,144,145,5,114,
		0,0,145,146,5,101,0,0,146,14,1,0,0,0,147,148,5,117,0,0,148,149,5,115,0,
		0,149,150,5,105,0,0,150,151,5,110,0,0,151,152,5,103,0,0,152,16,1,0,0,0,
		153,154,5,97,0,0,154,155,5,115,0,0,155,18,1,0,0,0,156,157,5,105,0,0,157,
		158,5,102,0,0,158,20,1,0,0,0,159,160,5,101,0,0,160,161,5,108,0,0,161,162,
		5,115,0,0,162,163,5,101,0,0,163,22,1,0,0,0,164,165,5,101,0,0,165,166,5,
		108,0,0,166,167,5,105,0,0,167,168,5,102,0,0,168,24,1,0,0,0,169,170,5,105,
		0,0,170,171,5,110,0,0,171,172,5,116,0,0,172,26,1,0,0,0,173,174,5,98,0,
		0,174,175,5,111,0,0,175,176,5,111,0,0,176,177,5,108,0,0,177,28,1,0,0,0,
		178,179,5,110,0,0,179,180,5,117,0,0,180,181,5,108,0,0,181,182,5,108,0,
		0,182,30,1,0,0,0,183,184,5,116,0,0,184,185,5,114,0,0,185,186,5,117,0,0,
		186,187,5,101,0,0,187,32,1,0,0,0,188,189,5,102,0,0,189,190,5,97,0,0,190,
		191,5,108,0,0,191,192,5,115,0,0,192,193,5,101,0,0,193,34,1,0,0,0,194,197,
		3,31,15,0,195,197,3,33,16,0,196,194,1,0,0,0,196,195,1,0,0,0,197,36,1,0,
		0,0,198,199,5,60,0,0,199,38,1,0,0,0,200,201,5,60,0,0,201,202,5,61,0,0,
		202,40,1,0,0,0,203,204,5,62,0,0,204,42,1,0,0,0,205,206,5,62,0,0,206,207,
		5,61,0,0,207,44,1,0,0,0,208,209,5,61,0,0,209,210,5,61,0,0,210,46,1,0,0,
		0,211,217,3,37,18,0,212,217,3,39,19,0,213,217,3,41,20,0,214,217,3,43,21,
		0,215,217,3,45,22,0,216,211,1,0,0,0,216,212,1,0,0,0,216,213,1,0,0,0,216,
		214,1,0,0,0,216,215,1,0,0,0,217,48,1,0,0,0,218,219,5,126,0,0,219,50,1,
		0,0,0,220,221,5,61,0,0,221,52,1,0,0,0,222,223,5,40,0,0,223,54,1,0,0,0,
		224,225,5,41,0,0,225,56,1,0,0,0,226,227,5,91,0,0,227,58,1,0,0,0,228,229,
		5,93,0,0,229,60,1,0,0,0,230,231,5,123,0,0,231,62,1,0,0,0,232,233,5,125,
		0,0,233,64,1,0,0,0,234,235,5,44,0,0,235,66,1,0,0,0,236,237,5,46,0,0,237,
		68,1,0,0,0,238,239,5,59,0,0,239,70,1,0,0,0,240,241,5,95,0,0,241,72,1,0,
		0,0,242,243,5,35,0,0,243,74,1,0,0,0,244,245,5,34,0,0,245,76,1,0,0,0,246,
		247,5,42,0,0,247,78,1,0,0,0,248,249,5,47,0,0,249,80,1,0,0,0,250,254,3,
		97,48,0,251,254,3,99,49,0,252,254,3,83,41,0,253,250,1,0,0,0,253,251,1,
		0,0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,256,6,40,0,0,256,82,1,0,0,0,
		257,258,5,47,0,0,258,259,5,47,0,0,259,263,1,0,0,0,260,262,8,0,0,0,261,
		260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,84,1,0,
		0,0,265,263,1,0,0,0,266,268,3,93,46,0,267,266,1,0,0,0,268,269,1,0,0,0,
		269,267,1,0,0,0,269,270,1,0,0,0,270,86,1,0,0,0,271,275,3,75,37,0,272,274,
		8,1,0,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,
		0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,3,75,37,0,279,88,1,0,0,0,280,
		296,3,91,45,0,281,288,3,91,45,0,282,287,3,91,45,0,283,287,3,85,42,0,284,
		287,3,71,35,0,285,287,3,67,33,0,286,282,1,0,0,0,286,283,1,0,0,0,286,284,
		1,0,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,
		0,289,293,1,0,0,0,290,288,1,0,0,0,291,294,3,91,45,0,292,294,3,85,42,0,
		293,291,1,0,0,0,293,292,1,0,0,0,294,296,1,0,0,0,295,280,1,0,0,0,295,281,
		1,0,0,0,296,90,1,0,0,0,297,298,7,2,0,0,298,92,1,0,0,0,299,300,7,3,0,0,
		300,94,1,0,0,0,301,302,7,4,0,0,302,96,1,0,0,0,303,305,7,5,0,0,304,303,
		1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,98,1,0,0,0,
		308,310,7,0,0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,0,311,312,
		1,0,0,0,312,315,1,0,0,0,313,315,5,0,0,1,314,309,1,0,0,0,314,313,1,0,0,
		0,315,100,1,0,0,0,14,0,196,216,253,263,269,275,286,288,293,295,306,311,
		314,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
