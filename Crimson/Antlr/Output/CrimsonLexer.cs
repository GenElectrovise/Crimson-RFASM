//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Allocator=3, Function=4, Global=5, Return=6, Structure=7, 
		Using=8, OpHandler=9, As=10, If=11, While=12, Else=13, Elif=14, Integer=15, 
		Boolean=16, Null=17, BooleanValue=18, Operator=19, Asterisk=20, MathsOperator=21, 
		Comparator=22, RightArrow=23, Tilda=24, DirectEquals=25, PointerEquals=26, 
		OpenBracket=27, CloseBracket=28, OpenSquare=29, CloseSquare=30, OpenBrace=31, 
		CloseBrace=32, Comma=33, Dot=34, SemiColon=35, Underscore=36, Hashtag=37, 
		Quote=38, SkipTokens=39, LineComment=40, Number=41, String=42, Identifier=43;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "Allocator", "Function", "Global", "Return", "Structure", 
		"Using", "OpHandler", "As", "If", "While", "Else", "Elif", "Integer", 
		"Boolean", "Null", "True", "False", "BooleanValue", "Operator", "Plus", 
		"Minus", "Asterisk", "Slash", "MathsOperator", "Less", "LessEqual", "Greater", 
		"GreaterEqual", "EqualTo", "Comparator", "RightArrow", "Tilda", "DirectEquals", 
		"PointerEquals", "OpenBracket", "CloseBracket", "OpenSquare", "CloseSquare", 
		"OpenBrace", "CloseBrace", "Comma", "Dot", "SemiColon", "Underscore", 
		"Hashtag", "Quote", "SkipTokens", "LineComment", "Number", "String", "Identifier", 
		"Alphabetic", "Digit", "Punctuation", "WhiteSpace", "Newline"
	};


	public CrimsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CrimsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", "'allocator'", "'function'", "'global'", "'return'", 
		"'structure'", "'using'", "'ophandler'", "'as'", "'if'", "'while'", "'else'", 
		"'elif'", "'int'", "'bool'", "'null'", null, null, "'*'", null, null, 
		"'->'", "'~'", "'='", "'*='", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"','", "'.'", "';'", "'_'", "'#'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Allocator", "Function", "Global", "Return", "Structure", 
		"Using", "OpHandler", "As", "If", "While", "Else", "Elif", "Integer", 
		"Boolean", "Null", "BooleanValue", "Operator", "Asterisk", "MathsOperator", 
		"Comparator", "RightArrow", "Tilda", "DirectEquals", "PointerEquals", 
		"OpenBracket", "CloseBracket", "OpenSquare", "CloseSquare", "OpenBrace", 
		"CloseBrace", "Comma", "Dot", "SemiColon", "Underscore", "Hashtag", "Quote", 
		"SkipTokens", "LineComment", "Number", "String", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,43,369,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
		10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
		13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
		16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,
		18,1,18,1,19,1,19,3,19,230,8,19,1,20,1,20,3,20,234,8,20,1,21,1,21,1,22,
		1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,3,25,248,8,25,1,26,1,26,1,
		27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,
		31,1,31,3,31,268,8,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,
		1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,
		1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,3,48,
		307,8,48,1,48,1,48,1,49,1,49,1,49,1,49,5,49,315,8,49,10,49,12,49,318,9,
		49,1,50,4,50,321,8,50,11,50,12,50,322,1,51,1,51,5,51,327,8,51,10,51,12,
		51,330,9,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,5,52,340,8,52,10,52,
		12,52,343,9,52,1,52,1,52,3,52,347,8,52,3,52,349,8,52,1,53,1,53,1,54,1,
		54,1,55,1,55,1,56,4,56,358,8,56,11,56,12,56,359,1,57,4,57,363,8,57,11,
		57,12,57,364,1,57,3,57,368,8,57,0,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,0,37,0,39,18,
		41,19,43,0,45,0,47,20,49,0,51,21,53,0,55,0,57,0,59,0,61,0,63,22,65,23,
		67,24,69,25,71,26,73,27,75,28,77,29,79,30,81,31,83,32,85,33,87,34,89,35,
		91,36,93,37,95,38,97,39,99,40,101,41,103,42,105,43,107,0,109,0,111,0,113,
		0,115,0,1,0,6,2,0,10,10,13,13,1,0,34,34,2,0,65,90,97,122,1,0,48,57,2,0,
		46,46,95,95,2,0,9,9,32,32,376,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,47,1,0,0,
		0,0,51,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
		0,0,0,105,1,0,0,0,1,117,1,0,0,0,3,119,1,0,0,0,5,121,1,0,0,0,7,131,1,0,
		0,0,9,140,1,0,0,0,11,147,1,0,0,0,13,154,1,0,0,0,15,164,1,0,0,0,17,170,
		1,0,0,0,19,180,1,0,0,0,21,183,1,0,0,0,23,186,1,0,0,0,25,192,1,0,0,0,27,
		197,1,0,0,0,29,202,1,0,0,0,31,206,1,0,0,0,33,211,1,0,0,0,35,216,1,0,0,
		0,37,221,1,0,0,0,39,229,1,0,0,0,41,233,1,0,0,0,43,235,1,0,0,0,45,237,1,
		0,0,0,47,239,1,0,0,0,49,241,1,0,0,0,51,247,1,0,0,0,53,249,1,0,0,0,55,251,
		1,0,0,0,57,254,1,0,0,0,59,256,1,0,0,0,61,259,1,0,0,0,63,267,1,0,0,0,65,
		269,1,0,0,0,67,272,1,0,0,0,69,274,1,0,0,0,71,276,1,0,0,0,73,279,1,0,0,
		0,75,281,1,0,0,0,77,283,1,0,0,0,79,285,1,0,0,0,81,287,1,0,0,0,83,289,1,
		0,0,0,85,291,1,0,0,0,87,293,1,0,0,0,89,295,1,0,0,0,91,297,1,0,0,0,93,299,
		1,0,0,0,95,301,1,0,0,0,97,306,1,0,0,0,99,310,1,0,0,0,101,320,1,0,0,0,103,
		324,1,0,0,0,105,348,1,0,0,0,107,350,1,0,0,0,109,352,1,0,0,0,111,354,1,
		0,0,0,113,357,1,0,0,0,115,367,1,0,0,0,117,118,5,13,0,0,118,2,1,0,0,0,119,
		120,5,10,0,0,120,4,1,0,0,0,121,122,5,97,0,0,122,123,5,108,0,0,123,124,
		5,108,0,0,124,125,5,111,0,0,125,126,5,99,0,0,126,127,5,97,0,0,127,128,
		5,116,0,0,128,129,5,111,0,0,129,130,5,114,0,0,130,6,1,0,0,0,131,132,5,
		102,0,0,132,133,5,117,0,0,133,134,5,110,0,0,134,135,5,99,0,0,135,136,5,
		116,0,0,136,137,5,105,0,0,137,138,5,111,0,0,138,139,5,110,0,0,139,8,1,
		0,0,0,140,141,5,103,0,0,141,142,5,108,0,0,142,143,5,111,0,0,143,144,5,
		98,0,0,144,145,5,97,0,0,145,146,5,108,0,0,146,10,1,0,0,0,147,148,5,114,
		0,0,148,149,5,101,0,0,149,150,5,116,0,0,150,151,5,117,0,0,151,152,5,114,
		0,0,152,153,5,110,0,0,153,12,1,0,0,0,154,155,5,115,0,0,155,156,5,116,0,
		0,156,157,5,114,0,0,157,158,5,117,0,0,158,159,5,99,0,0,159,160,5,116,0,
		0,160,161,5,117,0,0,161,162,5,114,0,0,162,163,5,101,0,0,163,14,1,0,0,0,
		164,165,5,117,0,0,165,166,5,115,0,0,166,167,5,105,0,0,167,168,5,110,0,
		0,168,169,5,103,0,0,169,16,1,0,0,0,170,171,5,111,0,0,171,172,5,112,0,0,
		172,173,5,104,0,0,173,174,5,97,0,0,174,175,5,110,0,0,175,176,5,100,0,0,
		176,177,5,108,0,0,177,178,5,101,0,0,178,179,5,114,0,0,179,18,1,0,0,0,180,
		181,5,97,0,0,181,182,5,115,0,0,182,20,1,0,0,0,183,184,5,105,0,0,184,185,
		5,102,0,0,185,22,1,0,0,0,186,187,5,119,0,0,187,188,5,104,0,0,188,189,5,
		105,0,0,189,190,5,108,0,0,190,191,5,101,0,0,191,24,1,0,0,0,192,193,5,101,
		0,0,193,194,5,108,0,0,194,195,5,115,0,0,195,196,5,101,0,0,196,26,1,0,0,
		0,197,198,5,101,0,0,198,199,5,108,0,0,199,200,5,105,0,0,200,201,5,102,
		0,0,201,28,1,0,0,0,202,203,5,105,0,0,203,204,5,110,0,0,204,205,5,116,0,
		0,205,30,1,0,0,0,206,207,5,98,0,0,207,208,5,111,0,0,208,209,5,111,0,0,
		209,210,5,108,0,0,210,32,1,0,0,0,211,212,5,110,0,0,212,213,5,117,0,0,213,
		214,5,108,0,0,214,215,5,108,0,0,215,34,1,0,0,0,216,217,5,116,0,0,217,218,
		5,114,0,0,218,219,5,117,0,0,219,220,5,101,0,0,220,36,1,0,0,0,221,222,5,
		102,0,0,222,223,5,97,0,0,223,224,5,108,0,0,224,225,5,115,0,0,225,226,5,
		101,0,0,226,38,1,0,0,0,227,230,3,35,17,0,228,230,3,37,18,0,229,227,1,0,
		0,0,229,228,1,0,0,0,230,40,1,0,0,0,231,234,3,63,31,0,232,234,3,51,25,0,
		233,231,1,0,0,0,233,232,1,0,0,0,234,42,1,0,0,0,235,236,5,43,0,0,236,44,
		1,0,0,0,237,238,5,45,0,0,238,46,1,0,0,0,239,240,5,42,0,0,240,48,1,0,0,
		0,241,242,5,47,0,0,242,50,1,0,0,0,243,248,3,43,21,0,244,248,3,45,22,0,
		245,248,3,47,23,0,246,248,3,49,24,0,247,243,1,0,0,0,247,244,1,0,0,0,247,
		245,1,0,0,0,247,246,1,0,0,0,248,52,1,0,0,0,249,250,5,60,0,0,250,54,1,0,
		0,0,251,252,5,60,0,0,252,253,5,61,0,0,253,56,1,0,0,0,254,255,5,62,0,0,
		255,58,1,0,0,0,256,257,5,62,0,0,257,258,5,61,0,0,258,60,1,0,0,0,259,260,
		5,61,0,0,260,261,5,61,0,0,261,62,1,0,0,0,262,268,3,53,26,0,263,268,3,55,
		27,0,264,268,3,57,28,0,265,268,3,59,29,0,266,268,3,61,30,0,267,262,1,0,
		0,0,267,263,1,0,0,0,267,264,1,0,0,0,267,265,1,0,0,0,267,266,1,0,0,0,268,
		64,1,0,0,0,269,270,5,45,0,0,270,271,5,62,0,0,271,66,1,0,0,0,272,273,5,
		126,0,0,273,68,1,0,0,0,274,275,5,61,0,0,275,70,1,0,0,0,276,277,5,42,0,
		0,277,278,5,61,0,0,278,72,1,0,0,0,279,280,5,40,0,0,280,74,1,0,0,0,281,
		282,5,41,0,0,282,76,1,0,0,0,283,284,5,91,0,0,284,78,1,0,0,0,285,286,5,
		93,0,0,286,80,1,0,0,0,287,288,5,123,0,0,288,82,1,0,0,0,289,290,5,125,0,
		0,290,84,1,0,0,0,291,292,5,44,0,0,292,86,1,0,0,0,293,294,5,46,0,0,294,
		88,1,0,0,0,295,296,5,59,0,0,296,90,1,0,0,0,297,298,5,95,0,0,298,92,1,0,
		0,0,299,300,5,35,0,0,300,94,1,0,0,0,301,302,5,34,0,0,302,96,1,0,0,0,303,
		307,3,113,56,0,304,307,3,115,57,0,305,307,3,99,49,0,306,303,1,0,0,0,306,
		304,1,0,0,0,306,305,1,0,0,0,307,308,1,0,0,0,308,309,6,48,0,0,309,98,1,
		0,0,0,310,311,5,47,0,0,311,312,5,47,0,0,312,316,1,0,0,0,313,315,8,0,0,
		0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,
		100,1,0,0,0,318,316,1,0,0,0,319,321,3,109,54,0,320,319,1,0,0,0,321,322,
		1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,102,1,0,0,0,324,328,3,95,47,
		0,325,327,8,1,0,0,326,325,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,
		329,1,0,0,0,329,331,1,0,0,0,330,328,1,0,0,0,331,332,3,95,47,0,332,104,
		1,0,0,0,333,349,3,107,53,0,334,341,3,107,53,0,335,340,3,107,53,0,336,340,
		3,101,50,0,337,340,3,91,45,0,338,340,3,87,43,0,339,335,1,0,0,0,339,336,
		1,0,0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,
		0,341,342,1,0,0,0,342,346,1,0,0,0,343,341,1,0,0,0,344,347,3,107,53,0,345,
		347,3,101,50,0,346,344,1,0,0,0,346,345,1,0,0,0,347,349,1,0,0,0,348,333,
		1,0,0,0,348,334,1,0,0,0,349,106,1,0,0,0,350,351,7,2,0,0,351,108,1,0,0,
		0,352,353,7,3,0,0,353,110,1,0,0,0,354,355,7,4,0,0,355,112,1,0,0,0,356,
		358,7,5,0,0,357,356,1,0,0,0,358,359,1,0,0,0,359,357,1,0,0,0,359,360,1,
		0,0,0,360,114,1,0,0,0,361,363,7,0,0,0,362,361,1,0,0,0,363,364,1,0,0,0,
		364,362,1,0,0,0,364,365,1,0,0,0,365,368,1,0,0,0,366,368,5,0,0,1,367,362,
		1,0,0,0,367,366,1,0,0,0,368,116,1,0,0,0,16,0,229,233,247,267,306,316,322,
		328,339,341,346,348,359,364,367,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
