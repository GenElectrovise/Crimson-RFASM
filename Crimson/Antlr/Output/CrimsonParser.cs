//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Function=3, Global=4, Return=5, Structure=6, Using=7, 
		OpHandler=8, As=9, If=10, While=11, Else=12, Elif=13, Integer=14, Boolean=15, 
		Pointer=16, Null=17, BooleanValue=18, Operator=19, RightArrow=20, Comparator=21, 
		Tilda=22, DirectEquals=23, PointerEquals=24, OpenBracket=25, CloseBracket=26, 
		OpenSquare=27, CloseSquare=28, OpenBrace=29, CloseBrace=30, Comma=31, 
		Dot=32, SemiColon=33, Underscore=34, Hashtag=35, Quote=36, Plus=37, Minus=38, 
		Asterisk=39, Slash=40, SkipTokens=41, LineComment=42, Number=43, String=44, 
		Identifier=45;
	public const int
		RULE_translationUnit = 0, RULE_importUnit = 1, RULE_operationHandler = 2, 
		RULE_globalStatement = 3, RULE_globalVariableDeclaration = 4, RULE_functionDeclaration = 5, 
		RULE_functionBody = 6, RULE_internalStatement = 7, RULE_internalVariableDeclaration = 8, 
		RULE_assignVariable = 9, RULE_ifBlock = 10, RULE_whileBlock = 11, RULE_condition = 12, 
		RULE_elseIfBlock = 13, RULE_elseBlock = 14, RULE_assemblyCall = 15, RULE_functionCall = 16, 
		RULE_arguments = 17, RULE_functionReturn = 18, RULE_resolvableValue = 19, 
		RULE_rawValue = 20, RULE_operation = 21, RULE_parameterList = 22, RULE_parameter = 23, 
		RULE_structureDeclaration = 24, RULE_structureBody = 25, RULE_type = 26, 
		RULE_rawType = 27, RULE_array = 28;
	public static readonly string[] ruleNames = {
		"translationUnit", "importUnit", "operationHandler", "globalStatement", 
		"globalVariableDeclaration", "functionDeclaration", "functionBody", "internalStatement", 
		"internalVariableDeclaration", "assignVariable", "ifBlock", "whileBlock", 
		"condition", "elseIfBlock", "elseBlock", "assemblyCall", "functionCall", 
		"arguments", "functionReturn", "resolvableValue", "rawValue", "operation", 
		"parameterList", "parameter", "structureDeclaration", "structureBody", 
		"type", "rawType", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", "'function'", "'global'", "'return'", "'structure'", 
		"'using'", "'ophandler'", "'as'", "'if'", "'while'", "'else'", "'elif'", 
		"'int'", "'bool'", "'ptr'", "'null'", null, null, "'->'", null, "'~'", 
		"'='", "'*='", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'", 
		"';'", "'_'", "'#'", "'\"'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Function", "Global", "Return", "Structure", "Using", 
		"OpHandler", "As", "If", "While", "Else", "Elif", "Integer", "Boolean", 
		"Pointer", "Null", "BooleanValue", "Operator", "RightArrow", "Comparator", 
		"Tilda", "DirectEquals", "PointerEquals", "OpenBracket", "CloseBracket", 
		"OpenSquare", "CloseSquare", "OpenBrace", "CloseBrace", "Comma", "Dot", 
		"SemiColon", "Underscore", "Hashtag", "Quote", "Plus", "Minus", "Asterisk", 
		"Slash", "SkipTokens", "LineComment", "Number", "String", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CrimsonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CrimsonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		public ImportUnitContext _importUnit;
		public IList<ImportUnitContext> _imports = new List<ImportUnitContext>();
		public OperationHandlerContext _operationHandler;
		public IList<OperationHandlerContext> _opHandlers = new List<OperationHandlerContext>();
		public GlobalStatementContext _globalStatement;
		public IList<GlobalStatementContext> _statements = new List<GlobalStatementContext>();
		public IToken eof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CrimsonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportUnitContext[] importUnit() {
			return GetRuleContexts<ImportUnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportUnitContext importUnit(int i) {
			return GetRuleContext<ImportUnitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationHandlerContext[] operationHandler() {
			return GetRuleContexts<OperationHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationHandlerContext operationHandler(int i) {
			return GetRuleContext<OperationHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalStatementContext[] globalStatement() {
			return GetRuleContexts<GlobalStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalStatementContext globalStatement(int i) {
			return GetRuleContext<GlobalStatementContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 58;
					_localctx._importUnit = importUnit();
					_localctx._imports.Add(_localctx._importUnit);
					}
					} 
				}
				State = 63;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Hashtag) {
				{
				{
				State = 64;
				_localctx._operationHandler = operationHandler();
				_localctx._opHandlers.Add(_localctx._operationHandler);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 88L) != 0) {
				{
				{
				State = 70;
				_localctx._globalStatement = globalStatement();
				_localctx._statements.Add(_localctx._globalStatement);
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76;
			_localctx.eof = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportUnitContext : ParserRuleContext {
		public IToken path;
		public IToken identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CrimsonParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CrimsonParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(CrimsonParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CrimsonParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		public ImportUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterImportUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitImportUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportUnitContext importUnit() {
		ImportUnitContext _localctx = new ImportUnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_importUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(Hashtag);
			State = 79;
			Match(Using);
			State = 80;
			_localctx.path = Match(String);
			State = 81;
			Match(As);
			State = 82;
			_localctx.identifier = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationHandlerContext : ParserRuleContext {
		public TypeContext t1;
		public IToken op;
		public TypeContext t2;
		public IToken identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CrimsonParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpHandler() { return GetToken(CrimsonParser.OpHandler, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightArrow() { return GetToken(CrimsonParser.RightArrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CrimsonParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		public OperationHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterOperationHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitOperationHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationHandlerContext operationHandler() {
		OperationHandlerContext _localctx = new OperationHandlerContext(Context, State);
		EnterRule(_localctx, 4, RULE_operationHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(Hashtag);
			State = 85;
			Match(OpHandler);
			State = 86;
			Match(OpenBracket);
			State = 87;
			_localctx.t1 = type();
			State = 88;
			_localctx.op = Match(Operator);
			State = 89;
			_localctx.t2 = type();
			State = 90;
			Match(CloseBracket);
			State = 91;
			Match(RightArrow);
			State = 92;
			_localctx.identifier = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalStatementContext : ParserRuleContext {
		public GlobalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalStatement; } }
	 
		public GlobalStatementContext() { }
		public virtual void CopyFrom(GlobalStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GlobalVariableUnitStatementContext : GlobalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration() {
			return GetRuleContext<GlobalVariableDeclarationContext>(0);
		}
		public GlobalVariableUnitStatementContext(GlobalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterGlobalVariableUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitGlobalVariableUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableUnitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionUnitStatementContext : GlobalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public FunctionUnitStatementContext(GlobalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionUnitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructureUnitStatementContext : GlobalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureDeclarationContext structureDeclaration() {
			return GetRuleContext<StructureDeclarationContext>(0);
		}
		public StructureUnitStatementContext(GlobalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterStructureUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitStructureUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureUnitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalStatementContext globalStatement() {
		GlobalStatementContext _localctx = new GlobalStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_globalStatement);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
				_localctx = new GlobalVariableUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				globalVariableDeclaration();
				}
				break;
			case Function:
				_localctx = new FunctionUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				functionDeclaration();
				}
				break;
			case Structure:
				_localctx = new StructureUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 96;
				structureDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		public InternalVariableDeclarationContext declaration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(CrimsonParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration() {
			return GetRuleContext<InternalVariableDeclarationContext>(0);
		}
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_globalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(Global);
			State = 100;
			_localctx.declaration = internalVariableDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public IToken name;
		public TypeContext returnType;
		public ParameterListContext parameters;
		public FunctionBodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(CrimsonParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(Function);
			State = 103;
			_localctx.name = Match(Identifier);
			State = 104;
			_localctx.returnType = type();
			State = 105;
			_localctx.parameters = parameterList();
			State = 106;
			_localctx.body = functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public InternalStatementContext _internalStatement;
		public IList<InternalStatementContext> _statements = new List<InternalStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalStatementContext[] internalStatement() {
			return GetRuleContexts<InternalStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InternalStatementContext internalStatement(int i) {
			return GetRuleContext<InternalStatementContext>(i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(OpenBrace);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 35184510749728L) != 0) {
				{
				{
				State = 109;
				_localctx._internalStatement = internalStatement();
				_localctx._statements.Add(_localctx._internalStatement);
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalStatementContext : ParserRuleContext {
		public InternalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalStatement; } }
	 
		public InternalStatementContext() { }
		public virtual void CopyFrom(InternalStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionAssignVariableStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignVariableContext assignVariable() {
			return GetRuleContext<AssignVariableContext>(0);
		}
		public FunctionAssignVariableStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionAssignVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionAssignVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAssignVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionFunctionCallStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public FunctionFunctionCallStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionReturnStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnContext functionReturn() {
			return GetRuleContext<FunctionReturnContext>(0);
		}
		public FunctionReturnStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionVariableDeclarationStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration() {
			return GetRuleContext<InternalVariableDeclarationContext>(0);
		}
		public FunctionVariableDeclarationStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionAssemblyCallStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		public FunctionAssemblyCallStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionAssemblyCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionAssemblyCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAssemblyCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionIfStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public FunctionIfStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionWhileStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public FunctionWhileStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalStatementContext internalStatement() {
		InternalStatementContext _localctx = new InternalStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_internalStatement);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new FunctionVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				internalVariableDeclaration();
				}
				break;
			case 2:
				_localctx = new FunctionReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				functionReturn();
				}
				break;
			case 3:
				_localctx = new FunctionAssignVariableStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				assignVariable();
				}
				break;
			case 4:
				_localctx = new FunctionFunctionCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 120;
				functionCall();
				State = 121;
				Match(SemiColon);
				}
				break;
			case 5:
				_localctx = new FunctionIfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 123;
				ifBlock();
				}
				break;
			case 6:
				_localctx = new FunctionWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 124;
				whileBlock();
				}
				break;
			case 7:
				_localctx = new FunctionAssemblyCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 125;
				assemblyCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalVariableDeclarationContext : ParserRuleContext {
		public ResolvableValueContext value;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectEquals() { return GetToken(CrimsonParser.DirectEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue() {
			return GetRuleContext<ResolvableValueContext>(0);
		}
		public InternalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterInternalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitInternalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalVariableDeclarationContext internalVariableDeclaration() {
		InternalVariableDeclarationContext _localctx = new InternalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_internalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			type();
			State = 129;
			Match(Identifier);
			State = 130;
			Match(DirectEquals);
			State = 131;
			_localctx.value = resolvableValue();
			State = 132;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignVariableContext : ParserRuleContext {
		public AssignVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignVariable; } }
	 
		public AssignVariableContext() { }
		public virtual void CopyFrom(AssignVariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignVariableAtPointerContext : AssignVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointerEquals() { return GetToken(CrimsonParser.PointerEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue() {
			return GetRuleContext<ResolvableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public AssignVariableAtPointerContext(AssignVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableAtPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableAtPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableAtPointer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVariableDirectContext : AssignVariableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectEquals() { return GetToken(CrimsonParser.DirectEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue() {
			return GetRuleContext<ResolvableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public AssignVariableDirectContext(AssignVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableDirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignVariableContext assignVariable() {
		AssignVariableContext _localctx = new AssignVariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_assignVariable);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new AssignVariableDirectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				Match(Identifier);
				State = 135;
				Match(DirectEquals);
				State = 136;
				resolvableValue();
				State = 137;
				Match(SemiColon);
				}
				break;
			case 2:
				_localctx = new AssignVariableAtPointerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				Match(Identifier);
				State = 140;
				Match(PointerEquals);
				State = 141;
				resolvableValue();
				State = 142;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CrimsonParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(If);
			State = 147;
			condition();
			State = 148;
			functionBody();
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 149;
				elseBlock();
				}
				break;
			case 2:
				{
				State = 150;
				elseIfBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CrimsonParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(While);
			State = 154;
			condition();
			State = 155;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ResolvableValueContext leftValue;
		public IToken comparator;
		public ResolvableValueContext rightValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext[] resolvableValue() {
			return GetRuleContexts<ResolvableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue(int i) {
			return GetRuleContext<ResolvableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comparator() { return GetToken(CrimsonParser.Comparator, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 24, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(OpenBracket);
			State = 158;
			_localctx.leftValue = resolvableValue();
			State = 159;
			_localctx.comparator = Match(Comparator);
			State = 160;
			_localctx.rightValue = resolvableValue();
			State = 161;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CrimsonParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_elseIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(Else);
			State = 164;
			ifBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CrimsonParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(Else);
			State = 167;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		public IToken assemblyText;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilda() { return GetToken(CrimsonParser.Tilda, 0); }
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 30, RULE_assemblyCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(Tilda);
			State = 173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 170;
					_localctx.assemblyText = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==T__0 || _la==T__1) ) {
						_localctx.assemblyText = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(Identifier);
			State = 177;
			arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext[] resolvableValue() {
			return GetRuleContexts<ResolvableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue(int i) {
			return GetRuleContext<ResolvableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(OpenBracket);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 43980465504256L) != 0) {
				{
				State = 180;
				resolvableValue();
				}
			}

			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 183;
				Match(Comma);
				{
				State = 184;
				resolvableValue();
				}
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CrimsonParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue() {
			return GetRuleContext<ResolvableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public FunctionReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnContext functionReturn() {
		FunctionReturnContext _localctx = new FunctionReturnContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionReturn);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(Return);
				State = 193;
				resolvableValue();
				State = 194;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196;
				Match(Return);
				State = 197;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResolvableValueContext : ParserRuleContext {
		public ResolvableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resolvableValue; } }
	 
		public ResolvableValueContext() { }
		public virtual void CopyFrom(ResolvableValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RawValueResolvableValueStatementContext : ResolvableValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawValueContext rawValue() {
			return GetRuleContext<RawValueContext>(0);
		}
		public RawValueResolvableValueStatementContext(ResolvableValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterRawValueResolvableValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitRawValueResolvableValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawValueResolvableValueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierResolvableValueStatementContext : ResolvableValueContext {
		public IToken pointer;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(CrimsonParser.Asterisk, 0); }
		public IdentifierResolvableValueStatementContext(ResolvableValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterIdentifierResolvableValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitIdentifierResolvableValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierResolvableValueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallResolvableValueStatementContext : ResolvableValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallResolvableValueStatementContext(ResolvableValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionCallResolvableValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionCallResolvableValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallResolvableValueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperationResolvableValueStatementContext : ResolvableValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public OperationResolvableValueStatementContext(ResolvableValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterOperationResolvableValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitOperationResolvableValueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationResolvableValueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResolvableValueContext resolvableValue() {
		ResolvableValueContext _localctx = new ResolvableValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_resolvableValue);
		int _la;
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new IdentifierResolvableValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				Match(Identifier);
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Asterisk) {
					{
					State = 201;
					((IdentifierResolvableValueStatementContext)_localctx).pointer = Match(Asterisk);
					}
				}

				}
				break;
			case 2:
				_localctx = new OperationResolvableValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				operation();
				}
				break;
			case 3:
				_localctx = new FunctionCallResolvableValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 205;
				functionCall();
				}
				break;
			case 4:
				_localctx = new RawValueResolvableValueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 206;
				rawValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(CrimsonParser.Null, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CrimsonParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanValue() { return GetToken(CrimsonParser.BooleanValue, 0); }
		public RawValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterRawValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitRawValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RawValueContext rawValue() {
		RawValueContext _localctx = new RawValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_rawValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8796093415424L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public IToken leftValue;
		public IToken @operator;
		public IToken rightValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CrimsonParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(CrimsonParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(CrimsonParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(CrimsonParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(CrimsonParser.Identifier, i);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 42, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			_localctx.leftValue = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==Identifier) ) {
				_localctx.leftValue = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 212;
			_localctx.@operator = Match(Operator);
			State = 213;
			_localctx.rightValue = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==Number || _la==Identifier) ) {
				_localctx.rightValue = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterList);
		int _la;
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215;
				Match(OpenBracket);
				State = 216;
				Match(CloseBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				Match(OpenBracket);
				State = 218;
				parameter();
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 219;
					Match(Comma);
					State = 220;
					parameter();
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 226;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			type();
			State = 231;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Structure() { return GetToken(CrimsonParser.Structure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructureBodyContext structureBody() {
			return GetRuleContext<StructureBodyContext>(0);
		}
		public StructureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterStructureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitStructureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDeclarationContext structureDeclaration() {
		StructureDeclarationContext _localctx = new StructureDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_structureDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(Structure);
			State = 234;
			Match(Identifier);
			State = 235;
			structureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext[] internalVariableDeclaration() {
			return GetRuleContexts<InternalVariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration(int i) {
			return GetRuleContext<InternalVariableDeclarationContext>(i);
		}
		public StructureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterStructureBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitStructureBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureBodyContext structureBody() {
		StructureBodyContext _localctx = new StructureBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_structureBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(OpenBrace);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 35184506552320L) != 0) {
				{
				{
				State = 238;
				internalVariableDeclaration();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 244;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public RawTypeContext name;
		public IToken pointer;
		[System.Diagnostics.DebuggerNonUserCode] public RawTypeContext rawType() {
			return GetRuleContext<RawTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(CrimsonParser.Asterisk, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_localctx.name = rawType();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Asterisk) {
				{
				State = 247;
				_localctx.pointer = Match(Asterisk);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(CrimsonParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(CrimsonParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pointer() { return GetToken(CrimsonParser.Pointer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(CrimsonParser.Null, 0); }
		public RawTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterRawType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitRawType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RawTypeContext rawType() {
		RawTypeContext _localctx = new RawTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_rawType);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250;
				Match(Integer);
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				Match(Boolean);
				}
				break;
			case Pointer:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252;
				Match(Pointer);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 253;
				Match(Identifier);
				}
				break;
			case OpenSquare:
				EnterOuterAlt(_localctx, 5);
				{
				State = 254;
				array();
				}
				break;
			case Null:
				EnterOuterAlt(_localctx, 6);
				{
				State = 255;
				Match(Null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenSquare() { return GetToken(CrimsonParser.OpenSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseSquare() { return GetToken(CrimsonParser.CloseSquare, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 56, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(OpenSquare);
			State = 259;
			type();
			State = 260;
			Match(CloseSquare);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,45,263,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,5,0,60,8,0,10,0,12,0,63,9,0,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,5,
		0,72,8,0,10,0,12,0,75,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,98,8,3,1,4,1,4,1,4,1,5,1,5,
		1,5,1,5,1,5,1,5,1,6,1,6,5,6,111,8,6,10,6,12,6,114,9,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,127,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,145,8,9,1,10,1,10,1,10,1,10,1,10,
		3,10,152,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
		13,1,13,1,14,1,14,1,14,1,15,1,15,5,15,172,8,15,10,15,12,15,175,9,15,1,
		16,1,16,1,16,1,17,1,17,3,17,182,8,17,1,17,1,17,5,17,186,8,17,10,17,12,
		17,189,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,199,8,18,1,19,
		1,19,3,19,203,8,19,1,19,1,19,1,19,3,19,208,8,19,1,20,1,20,1,21,1,21,1,
		21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,5,22,222,8,22,10,22,12,22,225,9,
		22,1,22,1,22,3,22,229,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,
		5,25,240,8,25,10,25,12,25,243,9,25,1,25,1,25,1,26,1,26,3,26,249,8,26,1,
		27,1,27,1,27,1,27,1,27,1,27,3,27,257,8,27,1,28,1,28,1,28,1,28,1,28,0,0,
		29,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,0,3,1,0,1,2,2,0,17,18,43,43,2,0,43,43,45,45,265,0,61,1,
		0,0,0,2,78,1,0,0,0,4,84,1,0,0,0,6,97,1,0,0,0,8,99,1,0,0,0,10,102,1,0,0,
		0,12,108,1,0,0,0,14,126,1,0,0,0,16,128,1,0,0,0,18,144,1,0,0,0,20,146,1,
		0,0,0,22,153,1,0,0,0,24,157,1,0,0,0,26,163,1,0,0,0,28,166,1,0,0,0,30,169,
		1,0,0,0,32,176,1,0,0,0,34,179,1,0,0,0,36,198,1,0,0,0,38,207,1,0,0,0,40,
		209,1,0,0,0,42,211,1,0,0,0,44,228,1,0,0,0,46,230,1,0,0,0,48,233,1,0,0,
		0,50,237,1,0,0,0,52,246,1,0,0,0,54,256,1,0,0,0,56,258,1,0,0,0,58,60,3,
		2,1,0,59,58,1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,67,1,
		0,0,0,63,61,1,0,0,0,64,66,3,4,2,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,
		0,0,0,67,68,1,0,0,0,68,73,1,0,0,0,69,67,1,0,0,0,70,72,3,6,3,0,71,70,1,
		0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,76,1,0,0,0,75,73,1,
		0,0,0,76,77,5,0,0,1,77,1,1,0,0,0,78,79,5,35,0,0,79,80,5,7,0,0,80,81,5,
		44,0,0,81,82,5,9,0,0,82,83,5,45,0,0,83,3,1,0,0,0,84,85,5,35,0,0,85,86,
		5,8,0,0,86,87,5,25,0,0,87,88,3,52,26,0,88,89,5,19,0,0,89,90,3,52,26,0,
		90,91,5,26,0,0,91,92,5,20,0,0,92,93,5,45,0,0,93,5,1,0,0,0,94,98,3,8,4,
		0,95,98,3,10,5,0,96,98,3,48,24,0,97,94,1,0,0,0,97,95,1,0,0,0,97,96,1,0,
		0,0,98,7,1,0,0,0,99,100,5,4,0,0,100,101,3,16,8,0,101,9,1,0,0,0,102,103,
		5,3,0,0,103,104,5,45,0,0,104,105,3,52,26,0,105,106,3,44,22,0,106,107,3,
		12,6,0,107,11,1,0,0,0,108,112,5,29,0,0,109,111,3,14,7,0,110,109,1,0,0,
		0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,
		112,1,0,0,0,115,116,5,30,0,0,116,13,1,0,0,0,117,127,3,16,8,0,118,127,3,
		36,18,0,119,127,3,18,9,0,120,121,3,32,16,0,121,122,5,33,0,0,122,127,1,
		0,0,0,123,127,3,20,10,0,124,127,3,22,11,0,125,127,3,30,15,0,126,117,1,
		0,0,0,126,118,1,0,0,0,126,119,1,0,0,0,126,120,1,0,0,0,126,123,1,0,0,0,
		126,124,1,0,0,0,126,125,1,0,0,0,127,15,1,0,0,0,128,129,3,52,26,0,129,130,
		5,45,0,0,130,131,5,23,0,0,131,132,3,38,19,0,132,133,5,33,0,0,133,17,1,
		0,0,0,134,135,5,45,0,0,135,136,5,23,0,0,136,137,3,38,19,0,137,138,5,33,
		0,0,138,145,1,0,0,0,139,140,5,45,0,0,140,141,5,24,0,0,141,142,3,38,19,
		0,142,143,5,33,0,0,143,145,1,0,0,0,144,134,1,0,0,0,144,139,1,0,0,0,145,
		19,1,0,0,0,146,147,5,10,0,0,147,148,3,24,12,0,148,151,3,12,6,0,149,152,
		3,28,14,0,150,152,3,26,13,0,151,149,1,0,0,0,151,150,1,0,0,0,151,152,1,
		0,0,0,152,21,1,0,0,0,153,154,5,11,0,0,154,155,3,24,12,0,155,156,3,12,6,
		0,156,23,1,0,0,0,157,158,5,25,0,0,158,159,3,38,19,0,159,160,5,21,0,0,160,
		161,3,38,19,0,161,162,5,26,0,0,162,25,1,0,0,0,163,164,5,12,0,0,164,165,
		3,20,10,0,165,27,1,0,0,0,166,167,5,12,0,0,167,168,3,12,6,0,168,29,1,0,
		0,0,169,173,5,22,0,0,170,172,8,0,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,
		171,1,0,0,0,173,174,1,0,0,0,174,31,1,0,0,0,175,173,1,0,0,0,176,177,5,45,
		0,0,177,178,3,34,17,0,178,33,1,0,0,0,179,181,5,25,0,0,180,182,3,38,19,
		0,181,180,1,0,0,0,181,182,1,0,0,0,182,187,1,0,0,0,183,184,5,31,0,0,184,
		186,3,38,19,0,185,183,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,
		1,0,0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,191,5,26,0,0,191,35,1,0,0,
		0,192,193,5,5,0,0,193,194,3,38,19,0,194,195,5,33,0,0,195,199,1,0,0,0,196,
		197,5,5,0,0,197,199,5,33,0,0,198,192,1,0,0,0,198,196,1,0,0,0,199,37,1,
		0,0,0,200,202,5,45,0,0,201,203,5,39,0,0,202,201,1,0,0,0,202,203,1,0,0,
		0,203,208,1,0,0,0,204,208,3,42,21,0,205,208,3,32,16,0,206,208,3,40,20,
		0,207,200,1,0,0,0,207,204,1,0,0,0,207,205,1,0,0,0,207,206,1,0,0,0,208,
		39,1,0,0,0,209,210,7,1,0,0,210,41,1,0,0,0,211,212,7,2,0,0,212,213,5,19,
		0,0,213,214,7,2,0,0,214,43,1,0,0,0,215,216,5,25,0,0,216,229,5,26,0,0,217,
		218,5,25,0,0,218,223,3,46,23,0,219,220,5,31,0,0,220,222,3,46,23,0,221,
		219,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,
		0,0,0,225,223,1,0,0,0,226,227,5,26,0,0,227,229,1,0,0,0,228,215,1,0,0,0,
		228,217,1,0,0,0,229,45,1,0,0,0,230,231,3,52,26,0,231,232,5,45,0,0,232,
		47,1,0,0,0,233,234,5,6,0,0,234,235,5,45,0,0,235,236,3,50,25,0,236,49,1,
		0,0,0,237,241,5,29,0,0,238,240,3,16,8,0,239,238,1,0,0,0,240,243,1,0,0,
		0,241,239,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,
		245,5,30,0,0,245,51,1,0,0,0,246,248,3,54,27,0,247,249,5,39,0,0,248,247,
		1,0,0,0,248,249,1,0,0,0,249,53,1,0,0,0,250,257,5,14,0,0,251,257,5,15,0,
		0,252,257,5,16,0,0,253,257,5,45,0,0,254,257,3,56,28,0,255,257,5,17,0,0,
		256,250,1,0,0,0,256,251,1,0,0,0,256,252,1,0,0,0,256,253,1,0,0,0,256,254,
		1,0,0,0,256,255,1,0,0,0,257,55,1,0,0,0,258,259,5,27,0,0,259,260,3,52,26,
		0,260,261,5,28,0,0,261,57,1,0,0,0,19,61,67,73,97,112,126,144,151,173,181,
		187,198,202,207,223,228,241,248,256
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
