//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Function=3, Global=4, Return=5, Structure=6, Using=7, 
		OpHandler=8, As=9, If=10, While=11, Else=12, Elif=13, Integer=14, Boolean=15, 
		Null=16, BooleanValue=17, Operator=18, Asterisk=19, MathsOperator=20, 
		Comparator=21, RightArrow=22, Tilda=23, DirectEquals=24, PointerEquals=25, 
		OpenBracket=26, CloseBracket=27, OpenSquare=28, CloseSquare=29, OpenBrace=30, 
		CloseBrace=31, Comma=32, Dot=33, SemiColon=34, Underscore=35, Hashtag=36, 
		Quote=37, SkipTokens=38, LineComment=39, Number=40, String=41, Identifier=42;
	public const int
		RULE_translationUnit = 0, RULE_heapMemoryAllocator = 1, RULE_importUnit = 2, 
		RULE_operationHandler = 3, RULE_globalStatement = 4, RULE_globalVariableDeclaration = 5, 
		RULE_functionDeclaration = 6, RULE_functionHeader = 7, RULE_functionBody = 8, 
		RULE_internalStatement = 9, RULE_internalVariableDeclaration = 10, RULE_assignVariable = 11, 
		RULE_ifBlock = 12, RULE_whileBlock = 13, RULE_condition = 14, RULE_elseIfBlock = 15, 
		RULE_elseBlock = 16, RULE_assemblyCall = 17, RULE_functionCall = 18, RULE_arguments = 19, 
		RULE_functionReturn = 20, RULE_simpleValue = 21, RULE_complexValue = 22, 
		RULE_rawValue = 23, RULE_operation = 24, RULE_parameterList = 25, RULE_parameter = 26, 
		RULE_structureDeclaration = 27, RULE_structureBody = 28, RULE_type = 29, 
		RULE_rawType = 30, RULE_array = 31;
	public static readonly string[] ruleNames = {
		"translationUnit", "heapMemoryAllocator", "importUnit", "operationHandler", 
		"globalStatement", "globalVariableDeclaration", "functionDeclaration", 
		"functionHeader", "functionBody", "internalStatement", "internalVariableDeclaration", 
		"assignVariable", "ifBlock", "whileBlock", "condition", "elseIfBlock", 
		"elseBlock", "assemblyCall", "functionCall", "arguments", "functionReturn", 
		"simpleValue", "complexValue", "rawValue", "operation", "parameterList", 
		"parameter", "structureDeclaration", "structureBody", "type", "rawType", 
		"array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\r'", "'\\n'", "'function'", "'global'", "'return'", "'structure'", 
		"'using'", "'ophandler'", "'as'", "'if'", "'while'", "'else'", "'elif'", 
		"'int'", "'bool'", "'null'", null, null, "'*'", null, null, "'->'", "'~'", 
		"'='", "'*='", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'", 
		"';'", "'_'", "'#'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Function", "Global", "Return", "Structure", "Using", 
		"OpHandler", "As", "If", "While", "Else", "Elif", "Integer", "Boolean", 
		"Null", "BooleanValue", "Operator", "Asterisk", "MathsOperator", "Comparator", 
		"RightArrow", "Tilda", "DirectEquals", "PointerEquals", "OpenBracket", 
		"CloseBracket", "OpenSquare", "CloseSquare", "OpenBrace", "CloseBrace", 
		"Comma", "Dot", "SemiColon", "Underscore", "Hashtag", "Quote", "SkipTokens", 
		"LineComment", "Number", "String", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CrimsonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CrimsonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		public HeapMemoryAllocatorContext heapAllocator;
		public ImportUnitContext _importUnit;
		public IList<ImportUnitContext> _imports = new List<ImportUnitContext>();
		public OperationHandlerContext _operationHandler;
		public IList<OperationHandlerContext> _opHandlers = new List<OperationHandlerContext>();
		public GlobalStatementContext _globalStatement;
		public IList<GlobalStatementContext> _statements = new List<GlobalStatementContext>();
		public IToken eof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CrimsonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HeapMemoryAllocatorContext heapMemoryAllocator() {
			return GetRuleContext<HeapMemoryAllocatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportUnitContext[] importUnit() {
			return GetRuleContexts<ImportUnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportUnitContext importUnit(int i) {
			return GetRuleContext<ImportUnitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationHandlerContext[] operationHandler() {
			return GetRuleContexts<OperationHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationHandlerContext operationHandler(int i) {
			return GetRuleContext<OperationHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalStatementContext[] globalStatement() {
			return GetRuleContexts<GlobalStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalStatementContext globalStatement(int i) {
			return GetRuleContext<GlobalStatementContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTranslationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 64;
			_localctx.heapAllocator = heapMemoryAllocator();
			}
			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 65;
					_localctx._importUnit = importUnit();
					_localctx._imports.Add(_localctx._importUnit);
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Hashtag) {
				{
				{
				State = 71;
				_localctx._operationHandler = operationHandler();
				_localctx._opHandlers.Add(_localctx._operationHandler);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 88L) != 0) {
				{
				{
				State = 77;
				_localctx._globalStatement = globalStatement();
				_localctx._statements.Add(_localctx._globalStatement);
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83;
			_localctx.eof = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeapMemoryAllocatorContext : ParserRuleContext {
		public FunctionHeaderContext header;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeaderContext functionHeader() {
			return GetRuleContext<FunctionHeaderContext>(0);
		}
		public HeapMemoryAllocatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heapMemoryAllocator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterHeapMemoryAllocator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitHeapMemoryAllocator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeapMemoryAllocator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeapMemoryAllocatorContext heapMemoryAllocator() {
		HeapMemoryAllocatorContext _localctx = new HeapMemoryAllocatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_heapMemoryAllocator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_localctx.header = functionHeader();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportUnitContext : ParserRuleContext {
		public IToken path;
		public IToken identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CrimsonParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CrimsonParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(CrimsonParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CrimsonParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		public ImportUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterImportUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitImportUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportUnitContext importUnit() {
		ImportUnitContext _localctx = new ImportUnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_importUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(Hashtag);
			State = 88;
			Match(Using);
			State = 89;
			_localctx.path = Match(String);
			State = 90;
			Match(As);
			State = 91;
			_localctx.identifier = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationHandlerContext : ParserRuleContext {
		public TypeContext t1;
		public IToken op;
		public TypeContext t2;
		public FunctionHeaderContext header;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CrimsonParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpHandler() { return GetToken(CrimsonParser.OpHandler, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightArrow() { return GetToken(CrimsonParser.RightArrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CrimsonParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeaderContext functionHeader() {
			return GetRuleContext<FunctionHeaderContext>(0);
		}
		public OperationHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterOperationHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitOperationHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationHandlerContext operationHandler() {
		OperationHandlerContext _localctx = new OperationHandlerContext(Context, State);
		EnterRule(_localctx, 6, RULE_operationHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(Hashtag);
			State = 94;
			Match(OpHandler);
			State = 95;
			Match(OpenBracket);
			State = 96;
			_localctx.t1 = type();
			State = 97;
			_localctx.op = Match(Operator);
			State = 98;
			_localctx.t2 = type();
			State = 99;
			Match(CloseBracket);
			State = 100;
			Match(RightArrow);
			State = 101;
			_localctx.header = functionHeader();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalStatementContext : ParserRuleContext {
		public GlobalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalStatement; } }
	 
		public GlobalStatementContext() { }
		public virtual void CopyFrom(GlobalStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GlobalVariableUnitStatementContext : GlobalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration() {
			return GetRuleContext<GlobalVariableDeclarationContext>(0);
		}
		public GlobalVariableUnitStatementContext(GlobalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterGlobalVariableUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitGlobalVariableUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableUnitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionUnitStatementContext : GlobalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public FunctionUnitStatementContext(GlobalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionUnitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructureUnitStatementContext : GlobalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureDeclarationContext structureDeclaration() {
			return GetRuleContext<StructureDeclarationContext>(0);
		}
		public StructureUnitStatementContext(GlobalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterStructureUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitStructureUnitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureUnitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalStatementContext globalStatement() {
		GlobalStatementContext _localctx = new GlobalStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_globalStatement);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
				_localctx = new GlobalVariableUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				globalVariableDeclaration();
				}
				break;
			case Function:
				_localctx = new FunctionUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				functionDeclaration();
				}
				break;
			case Structure:
				_localctx = new StructureUnitStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				structureDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		public InternalVariableDeclarationContext declaration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(CrimsonParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration() {
			return GetRuleContext<InternalVariableDeclarationContext>(0);
		}
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_globalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(Global);
			State = 109;
			_localctx.declaration = internalVariableDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public TypeContext returnType;
		public FunctionHeaderContext header;
		public FunctionBodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(CrimsonParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeaderContext functionHeader() {
			return GetRuleContext<FunctionHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(Function);
			State = 112;
			_localctx.returnType = type();
			State = 113;
			_localctx.header = functionHeader();
			State = 114;
			_localctx.body = functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeaderContext : ParserRuleContext {
		public IToken name;
		public ParameterListContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeaderContext functionHeader() {
		FunctionHeaderContext _localctx = new FunctionHeaderContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_localctx.name = Match(Identifier);
			State = 117;
			_localctx.parameters = parameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public InternalStatementContext _internalStatement;
		public IList<InternalStatementContext> _statements = new List<InternalStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalStatementContext[] internalStatement() {
			return GetRuleContexts<InternalStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InternalStatementContext internalStatement(int i) {
			return GetRuleContext<InternalStatementContext>(i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(OpenBrace);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398323452960L) != 0) {
				{
				{
				State = 120;
				_localctx._internalStatement = internalStatement();
				_localctx._statements.Add(_localctx._internalStatement);
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalStatementContext : ParserRuleContext {
		public InternalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalStatement; } }
	 
		public InternalStatementContext() { }
		public virtual void CopyFrom(InternalStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionAssignVariableStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignVariableContext assignVariable() {
			return GetRuleContext<AssignVariableContext>(0);
		}
		public FunctionAssignVariableStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionAssignVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionAssignVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAssignVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionFunctionCallStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public FunctionFunctionCallStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionReturnStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnContext functionReturn() {
			return GetRuleContext<FunctionReturnContext>(0);
		}
		public FunctionReturnStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionVariableDeclarationStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration() {
			return GetRuleContext<InternalVariableDeclarationContext>(0);
		}
		public FunctionVariableDeclarationStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionAssemblyCallStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		public FunctionAssemblyCallStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionAssemblyCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionAssemblyCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionAssemblyCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionIfStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public FunctionIfStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionWhileStatementContext : InternalStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public FunctionWhileStatementContext(InternalStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalStatementContext internalStatement() {
		InternalStatementContext _localctx = new InternalStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_internalStatement);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new FunctionVariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				internalVariableDeclaration();
				}
				break;
			case 2:
				_localctx = new FunctionReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				functionReturn();
				}
				break;
			case 3:
				_localctx = new FunctionAssignVariableStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				assignVariable();
				}
				break;
			case 4:
				_localctx = new FunctionFunctionCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 131;
				functionCall();
				State = 132;
				Match(SemiColon);
				}
				break;
			case 5:
				_localctx = new FunctionIfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 134;
				ifBlock();
				}
				break;
			case 6:
				_localctx = new FunctionWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 135;
				whileBlock();
				}
				break;
			case 7:
				_localctx = new FunctionAssemblyCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 136;
				assemblyCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalVariableDeclarationContext : ParserRuleContext {
		public ComplexValueContext complex;
		public SimpleValueContext simple;
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectEquals() { return GetToken(CrimsonParser.DirectEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public InternalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterInternalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitInternalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalVariableDeclarationContext internalVariableDeclaration() {
		InternalVariableDeclarationContext _localctx = new InternalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_internalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			type();
			State = 140;
			Match(Identifier);
			State = 141;
			Match(DirectEquals);
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 142;
				_localctx.complex = complexValue();
				}
				break;
			case 2:
				{
				State = 143;
				_localctx.simple = simpleValue();
				}
				break;
			}
			State = 146;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignVariableContext : ParserRuleContext {
		public AssignVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignVariable; } }
	 
		public AssignVariableContext() { }
		public virtual void CopyFrom(AssignVariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignVariableAtPointerContext : AssignVariableContext {
		public ComplexValueContext complex;
		public SimpleValueContext simple;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointerEquals() { return GetToken(CrimsonParser.PointerEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public AssignVariableAtPointerContext(AssignVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableAtPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableAtPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableAtPointer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVariableDirectContext : AssignVariableContext {
		public ComplexValueContext complex;
		public SimpleValueContext simple;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectEquals() { return GetToken(CrimsonParser.DirectEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public AssignVariableDirectContext(AssignVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableDirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignVariableContext assignVariable() {
		AssignVariableContext _localctx = new AssignVariableContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignVariable);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new AssignVariableDirectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				Match(Identifier);
				State = 149;
				Match(DirectEquals);
				State = 152;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 150;
					((AssignVariableDirectContext)_localctx).complex = complexValue();
					}
					break;
				case 2:
					{
					State = 151;
					((AssignVariableDirectContext)_localctx).simple = simpleValue();
					}
					break;
				}
				State = 154;
				Match(SemiColon);
				}
				break;
			case 2:
				_localctx = new AssignVariableAtPointerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				Match(Identifier);
				State = 157;
				Match(PointerEquals);
				State = 160;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 158;
					((AssignVariableAtPointerContext)_localctx).complex = complexValue();
					}
					break;
				case 2:
					{
					State = 159;
					((AssignVariableAtPointerContext)_localctx).simple = simpleValue();
					}
					break;
				}
				State = 162;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CrimsonParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(If);
			State = 167;
			condition();
			State = 168;
			functionBody();
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 169;
				elseBlock();
				}
				break;
			case 2:
				{
				State = 170;
				elseIfBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CrimsonParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(While);
			State = 174;
			condition();
			State = 175;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public OperationContext op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 28, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(OpenBracket);
			State = 178;
			_localctx.op = operation();
			State = 179;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CrimsonParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_elseIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(Else);
			State = 182;
			ifBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CrimsonParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(Else);
			State = 185;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		public IToken assemblyText;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilda() { return GetToken(CrimsonParser.Tilda, 0); }
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 34, RULE_assemblyCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(Tilda);
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 188;
					_localctx.assemblyText = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==T__0 || _la==T__1) ) {
						_localctx.assemblyText = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(Identifier);
			State = 195;
			arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext[] simpleValue() {
			return GetRuleContexts<SimpleValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue(int i) {
			return GetRuleContext<SimpleValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 38, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(OpenBracket);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 5497558335488L) != 0) {
				{
				State = 198;
				simpleValue();
				}
			}

			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 201;
				Match(Comma);
				{
				State = 202;
				simpleValue();
				}
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CrimsonParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public FunctionReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnContext functionReturn() {
		FunctionReturnContext _localctx = new FunctionReturnContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionReturn);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				Match(Return);
				State = 211;
				simpleValue();
				State = 212;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				Match(Return);
				State = 215;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public IToken id;
		public IToken pointer;
		public RawValueContext raw;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(CrimsonParser.Asterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RawValueContext rawValue() {
			return GetRuleContext<RawValueContext>(0);
		}
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterSimpleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitSimpleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_simpleValue);
		int _la;
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				_localctx.id = Match(Identifier);
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Asterisk) {
					{
					State = 219;
					_localctx.pointer = Match(Asterisk);
					}
				}

				}
				break;
			case Null:
			case BooleanValue:
			case Number:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				_localctx.raw = rawValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueContext : ParserRuleContext {
		public OperationContext op;
		public FunctionCallContext func;
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ComplexValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueContext complexValue() {
		ComplexValueContext _localctx = new ComplexValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_complexValue);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				_localctx.op = operation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				_localctx.func = functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(CrimsonParser.Null, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CrimsonParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanValue() { return GetToken(CrimsonParser.BooleanValue, 0); }
		public RawValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterRawValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitRawValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RawValueContext rawValue() {
		RawValueContext _localctx = new RawValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_rawValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1099511824384L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public SimpleValueContext leftValue;
		public IToken @operator;
		public SimpleValueContext rightValue;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext[] simpleValue() {
			return GetRuleContexts<SimpleValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue(int i) {
			return GetRuleContext<SimpleValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CrimsonParser.Operator, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 48, RULE_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_localctx.leftValue = simpleValue();
			State = 232;
			_localctx.@operator = Match(Operator);
			State = 233;
			_localctx.rightValue = simpleValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				Match(OpenBracket);
				State = 236;
				Match(CloseBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				Match(OpenBracket);
				State = 238;
				parameter();
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 239;
					Match(Comma);
					State = 240;
					parameter();
					}
					}
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 246;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			type();
			State = 251;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Structure() { return GetToken(CrimsonParser.Structure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructureBodyContext structureBody() {
			return GetRuleContext<StructureBodyContext>(0);
		}
		public StructureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterStructureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitStructureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDeclarationContext structureDeclaration() {
		StructureDeclarationContext _localctx = new StructureDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_structureDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(Structure);
			State = 254;
			Match(Identifier);
			State = 255;
			structureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext[] internalVariableDeclaration() {
			return GetRuleContexts<InternalVariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration(int i) {
			return GetRuleContext<InternalVariableDeclarationContext>(i);
		}
		public StructureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterStructureBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitStructureBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureBodyContext structureBody() {
		StructureBodyContext _localctx = new StructureBodyContext(Context, State);
		EnterRule(_localctx, 56, RULE_structureBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(OpenBrace);
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 4398315061248L) != 0) {
				{
				{
				State = 258;
				internalVariableDeclaration();
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 264;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public RawTypeContext name;
		public IToken pointer;
		[System.Diagnostics.DebuggerNonUserCode] public RawTypeContext rawType() {
			return GetRuleContext<RawTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(CrimsonParser.Asterisk, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_localctx.name = rawType();
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Asterisk) {
				{
				State = 267;
				_localctx.pointer = Match(Asterisk);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(CrimsonParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(CrimsonParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(CrimsonParser.Null, 0); }
		public RawTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterRawType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitRawType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RawTypeContext rawType() {
		RawTypeContext _localctx = new RawTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_rawType);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				Match(Integer);
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				Match(Boolean);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272;
				Match(Identifier);
				}
				break;
			case OpenSquare:
				EnterOuterAlt(_localctx, 4);
				{
				State = 273;
				array();
				}
				break;
			case Null:
				EnterOuterAlt(_localctx, 5);
				{
				State = 274;
				Match(Null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenSquare() { return GetToken(CrimsonParser.OpenSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseSquare() { return GetToken(CrimsonParser.CloseSquare, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 62, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(OpenSquare);
			State = 278;
			type();
			State = 279;
			Match(CloseSquare);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,42,282,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,5,0,67,8,0,10,0,12,0,70,9,0,1,0,
		5,0,73,8,0,10,0,12,0,76,9,0,1,0,5,0,79,8,0,10,0,12,0,82,9,0,1,0,1,0,1,
		1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,4,1,4,1,4,3,4,107,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
		8,1,8,5,8,122,8,8,10,8,12,8,125,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,3,9,138,8,9,1,10,1,10,1,10,1,10,1,10,3,10,145,8,10,1,10,1,10,
		1,11,1,11,1,11,1,11,3,11,153,8,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,161,
		8,11,1,11,1,11,3,11,165,8,11,1,12,1,12,1,12,1,12,1,12,3,12,172,8,12,1,
		13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,
		17,1,17,5,17,190,8,17,10,17,12,17,193,9,17,1,18,1,18,1,18,1,19,1,19,3,
		19,200,8,19,1,19,1,19,5,19,204,8,19,10,19,12,19,207,9,19,1,19,1,19,1,20,
		1,20,1,20,1,20,1,20,1,20,3,20,217,8,20,1,21,1,21,3,21,221,8,21,1,21,3,
		21,224,8,21,1,22,1,22,3,22,228,8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,
		1,25,1,25,1,25,1,25,1,25,5,25,242,8,25,10,25,12,25,245,9,25,1,25,1,25,
		3,25,249,8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,5,28,260,8,
		28,10,28,12,28,263,9,28,1,28,1,28,1,29,1,29,3,29,269,8,29,1,30,1,30,1,
		30,1,30,1,30,3,30,276,8,30,1,31,1,31,1,31,1,31,1,31,0,0,32,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,0,2,1,0,1,2,2,0,16,17,40,40,282,0,64,1,0,0,0,2,85,1,0,0,0,4,87,1,
		0,0,0,6,93,1,0,0,0,8,106,1,0,0,0,10,108,1,0,0,0,12,111,1,0,0,0,14,116,
		1,0,0,0,16,119,1,0,0,0,18,137,1,0,0,0,20,139,1,0,0,0,22,164,1,0,0,0,24,
		166,1,0,0,0,26,173,1,0,0,0,28,177,1,0,0,0,30,181,1,0,0,0,32,184,1,0,0,
		0,34,187,1,0,0,0,36,194,1,0,0,0,38,197,1,0,0,0,40,216,1,0,0,0,42,223,1,
		0,0,0,44,227,1,0,0,0,46,229,1,0,0,0,48,231,1,0,0,0,50,248,1,0,0,0,52,250,
		1,0,0,0,54,253,1,0,0,0,56,257,1,0,0,0,58,266,1,0,0,0,60,275,1,0,0,0,62,
		277,1,0,0,0,64,68,3,2,1,0,65,67,3,4,2,0,66,65,1,0,0,0,67,70,1,0,0,0,68,
		66,1,0,0,0,68,69,1,0,0,0,69,74,1,0,0,0,70,68,1,0,0,0,71,73,3,6,3,0,72,
		71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,80,1,0,0,0,76,
		74,1,0,0,0,77,79,3,8,4,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,
		81,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,5,0,0,1,84,1,1,0,0,0,85,86,
		3,14,7,0,86,3,1,0,0,0,87,88,5,36,0,0,88,89,5,7,0,0,89,90,5,41,0,0,90,91,
		5,9,0,0,91,92,5,42,0,0,92,5,1,0,0,0,93,94,5,36,0,0,94,95,5,8,0,0,95,96,
		5,26,0,0,96,97,3,58,29,0,97,98,5,18,0,0,98,99,3,58,29,0,99,100,5,27,0,
		0,100,101,5,22,0,0,101,102,3,14,7,0,102,7,1,0,0,0,103,107,3,10,5,0,104,
		107,3,12,6,0,105,107,3,54,27,0,106,103,1,0,0,0,106,104,1,0,0,0,106,105,
		1,0,0,0,107,9,1,0,0,0,108,109,5,4,0,0,109,110,3,20,10,0,110,11,1,0,0,0,
		111,112,5,3,0,0,112,113,3,58,29,0,113,114,3,14,7,0,114,115,3,16,8,0,115,
		13,1,0,0,0,116,117,5,42,0,0,117,118,3,50,25,0,118,15,1,0,0,0,119,123,5,
		30,0,0,120,122,3,18,9,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,
		0,123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,5,31,0,0,127,
		17,1,0,0,0,128,138,3,20,10,0,129,138,3,40,20,0,130,138,3,22,11,0,131,132,
		3,36,18,0,132,133,5,34,0,0,133,138,1,0,0,0,134,138,3,24,12,0,135,138,3,
		26,13,0,136,138,3,34,17,0,137,128,1,0,0,0,137,129,1,0,0,0,137,130,1,0,
		0,0,137,131,1,0,0,0,137,134,1,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,
		19,1,0,0,0,139,140,3,58,29,0,140,141,5,42,0,0,141,144,5,24,0,0,142,145,
		3,44,22,0,143,145,3,42,21,0,144,142,1,0,0,0,144,143,1,0,0,0,145,146,1,
		0,0,0,146,147,5,34,0,0,147,21,1,0,0,0,148,149,5,42,0,0,149,152,5,24,0,
		0,150,153,3,44,22,0,151,153,3,42,21,0,152,150,1,0,0,0,152,151,1,0,0,0,
		153,154,1,0,0,0,154,155,5,34,0,0,155,165,1,0,0,0,156,157,5,42,0,0,157,
		160,5,25,0,0,158,161,3,44,22,0,159,161,3,42,21,0,160,158,1,0,0,0,160,159,
		1,0,0,0,161,162,1,0,0,0,162,163,5,34,0,0,163,165,1,0,0,0,164,148,1,0,0,
		0,164,156,1,0,0,0,165,23,1,0,0,0,166,167,5,10,0,0,167,168,3,28,14,0,168,
		171,3,16,8,0,169,172,3,32,16,0,170,172,3,30,15,0,171,169,1,0,0,0,171,170,
		1,0,0,0,171,172,1,0,0,0,172,25,1,0,0,0,173,174,5,11,0,0,174,175,3,28,14,
		0,175,176,3,16,8,0,176,27,1,0,0,0,177,178,5,26,0,0,178,179,3,48,24,0,179,
		180,5,27,0,0,180,29,1,0,0,0,181,182,5,12,0,0,182,183,3,24,12,0,183,31,
		1,0,0,0,184,185,5,12,0,0,185,186,3,16,8,0,186,33,1,0,0,0,187,191,5,23,
		0,0,188,190,8,0,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,
		192,1,0,0,0,192,35,1,0,0,0,193,191,1,0,0,0,194,195,5,42,0,0,195,196,3,
		38,19,0,196,37,1,0,0,0,197,199,5,26,0,0,198,200,3,42,21,0,199,198,1,0,
		0,0,199,200,1,0,0,0,200,205,1,0,0,0,201,202,5,32,0,0,202,204,3,42,21,0,
		203,201,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,
		1,0,0,0,207,205,1,0,0,0,208,209,5,27,0,0,209,39,1,0,0,0,210,211,5,5,0,
		0,211,212,3,42,21,0,212,213,5,34,0,0,213,217,1,0,0,0,214,215,5,5,0,0,215,
		217,5,34,0,0,216,210,1,0,0,0,216,214,1,0,0,0,217,41,1,0,0,0,218,220,5,
		42,0,0,219,221,5,19,0,0,220,219,1,0,0,0,220,221,1,0,0,0,221,224,1,0,0,
		0,222,224,3,46,23,0,223,218,1,0,0,0,223,222,1,0,0,0,224,43,1,0,0,0,225,
		228,3,48,24,0,226,228,3,36,18,0,227,225,1,0,0,0,227,226,1,0,0,0,228,45,
		1,0,0,0,229,230,7,1,0,0,230,47,1,0,0,0,231,232,3,42,21,0,232,233,5,18,
		0,0,233,234,3,42,21,0,234,49,1,0,0,0,235,236,5,26,0,0,236,249,5,27,0,0,
		237,238,5,26,0,0,238,243,3,52,26,0,239,240,5,32,0,0,240,242,3,52,26,0,
		241,239,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,
		1,0,0,0,245,243,1,0,0,0,246,247,5,27,0,0,247,249,1,0,0,0,248,235,1,0,0,
		0,248,237,1,0,0,0,249,51,1,0,0,0,250,251,3,58,29,0,251,252,5,42,0,0,252,
		53,1,0,0,0,253,254,5,6,0,0,254,255,5,42,0,0,255,256,3,56,28,0,256,55,1,
		0,0,0,257,261,5,30,0,0,258,260,3,20,10,0,259,258,1,0,0,0,260,263,1,0,0,
		0,261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,261,1,0,0,0,264,
		265,5,31,0,0,265,57,1,0,0,0,266,268,3,60,30,0,267,269,5,19,0,0,268,267,
		1,0,0,0,268,269,1,0,0,0,269,59,1,0,0,0,270,276,5,14,0,0,271,276,5,15,0,
		0,272,276,5,42,0,0,273,276,3,62,31,0,274,276,5,16,0,0,275,270,1,0,0,0,
		275,271,1,0,0,0,275,272,1,0,0,0,275,273,1,0,0,0,275,274,1,0,0,0,276,61,
		1,0,0,0,277,278,5,28,0,0,278,279,3,58,29,0,279,280,5,29,0,0,280,63,1,0,
		0,0,23,68,74,80,106,123,137,144,152,160,164,171,191,199,205,216,220,223,
		227,243,248,261,268,275
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
