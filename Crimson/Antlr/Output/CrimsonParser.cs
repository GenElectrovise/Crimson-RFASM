//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Input/Crimson.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Crimson.AntlrBuild {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class CrimsonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Allocator=1, Function=2, Global=3, Scoped=4, Return=5, Structure=6, Using=7, 
		OpHandler=8, As=9, If=10, While=11, Else=12, Elif=13, Integer=14, Boolean=15, 
		Null=16, BooleanValue=17, Operator=18, Asterisk=19, MathsOperator=20, 
		Comparator=21, RightArrow=22, BasicCall=23, AssemblyCall=24, DirectEquals=25, 
		PointerEquals=26, OpenBracket=27, CloseBracket=28, OpenSquare=29, CloseSquare=30, 
		OpenBrace=31, CloseBrace=32, Comma=33, Dot=34, SemiColon=35, Underscore=36, 
		Hashtag=37, Quote=38, SkipTokens=39, LineComment=40, BlockComment=41, 
		Number=42, String=43, ShortName=44;
	public const int
		RULE_scope = 0, RULE_importUnit = 1, RULE_operationHandler = 2, RULE_statement = 3, 
		RULE_internalVariableDeclaration = 4, RULE_assignVariable = 5, RULE_ifBlock = 6, 
		RULE_whileBlock = 7, RULE_condition = 8, RULE_elseIfBlock = 9, RULE_elseBlock = 10, 
		RULE_basicCall = 11, RULE_assemblyCall = 12, RULE_globalVariableDeclaration = 13, 
		RULE_scopedVariableDeclaration = 14, RULE_functionDeclaration = 15, RULE_functionHeader = 16, 
		RULE_functionCall = 17, RULE_arguments = 18, RULE_functionReturn = 19, 
		RULE_simpleValue = 20, RULE_complexValue = 21, RULE_rawValue = 22, RULE_operation = 23, 
		RULE_parameter = 24, RULE_parameterList = 25, RULE_structureDeclaration = 26, 
		RULE_structureBody = 27, RULE_array = 28, RULE_fullName = 29;
	public static readonly string[] ruleNames = {
		"scope", "importUnit", "operationHandler", "statement", "internalVariableDeclaration", 
		"assignVariable", "ifBlock", "whileBlock", "condition", "elseIfBlock", 
		"elseBlock", "basicCall", "assemblyCall", "globalVariableDeclaration", 
		"scopedVariableDeclaration", "functionDeclaration", "functionHeader", 
		"functionCall", "arguments", "functionReturn", "simpleValue", "complexValue", 
		"rawValue", "operation", "parameter", "parameterList", "structureDeclaration", 
		"structureBody", "array", "fullName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'allocator'", "'function'", "'global'", "'scoped'", "'return'", 
		"'structure'", "'using'", "'ophandler'", "'as'", "'if'", "'while'", "'else'", 
		"'elif'", "'int'", "'bool'", "'null'", null, null, "'*'", null, null, 
		"'->'", "'B~'", "'A~'", "'='", "'*='", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "','", "'.'", "';'", "'_'", "'#'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Allocator", "Function", "Global", "Scoped", "Return", "Structure", 
		"Using", "OpHandler", "As", "If", "While", "Else", "Elif", "Integer", 
		"Boolean", "Null", "BooleanValue", "Operator", "Asterisk", "MathsOperator", 
		"Comparator", "RightArrow", "BasicCall", "AssemblyCall", "DirectEquals", 
		"PointerEquals", "OpenBracket", "CloseBracket", "OpenSquare", "CloseSquare", 
		"OpenBrace", "CloseBrace", "Comma", "Dot", "SemiColon", "Underscore", 
		"Hashtag", "Quote", "SkipTokens", "LineComment", "BlockComment", "Number", 
		"String", "ShortName"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CrimsonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CrimsonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CrimsonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScopeContext : ParserRuleContext {
		public ImportUnitContext _importUnit;
		public IList<ImportUnitContext> _imports = new List<ImportUnitContext>();
		public OperationHandlerContext _operationHandler;
		public IList<OperationHandlerContext> _opHandlers = new List<OperationHandlerContext>();
		public StatementContext _statement;
		public IList<StatementContext> _statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportUnitContext[] importUnit() {
			return GetRuleContexts<ImportUnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportUnitContext importUnit(int i) {
			return GetRuleContext<ImportUnitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationHandlerContext[] operationHandler() {
			return GetRuleContexts<OperationHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationHandlerContext operationHandler(int i) {
			return GetRuleContext<OperationHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 0, RULE_scope);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(OpenBrace);
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 61;
					_localctx._importUnit = importUnit();
					_localctx._imports.Add(_localctx._importUnit);
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Hashtag) {
				{
				{
				State = 67;
				_localctx._operationHandler = operationHandler();
				_localctx._opHandlers.Add(_localctx._operationHandler);
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 17592211213420L) != 0) {
				{
				{
				State = 73;
				_localctx._statement = statement();
				_localctx._statements.Add(_localctx._statement);
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 79;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportUnitContext : ParserRuleContext {
		public IToken path;
		public FullNameContext identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CrimsonParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Using() { return GetToken(CrimsonParser.Using, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode As() { return GetToken(CrimsonParser.As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CrimsonParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		public ImportUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterImportUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitImportUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportUnitContext importUnit() {
		ImportUnitContext _localctx = new ImportUnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_importUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(Hashtag);
			State = 82;
			Match(Using);
			State = 83;
			_localctx.path = Match(String);
			State = 84;
			Match(As);
			State = 85;
			_localctx.identifier = fullName();
			State = 86;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationHandlerContext : ParserRuleContext {
		public IToken op;
		public FullNameContext identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(CrimsonParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpHandler() { return GetToken(CrimsonParser.OpHandler, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightArrow() { return GetToken(CrimsonParser.RightArrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CrimsonParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		public OperationHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterOperationHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitOperationHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationHandlerContext operationHandler() {
		OperationHandlerContext _localctx = new OperationHandlerContext(Context, State);
		EnterRule(_localctx, 4, RULE_operationHandler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(Hashtag);
			State = 89;
			Match(OpHandler);
			State = 90;
			_localctx.op = Match(Operator);
			State = 91;
			Match(RightArrow);
			State = 92;
			_localctx.identifier = fullName();
			State = 93;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructureDeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructureDeclarationContext structureDeclaration() {
			return GetRuleContext<StructureDeclarationContext>(0);
		}
		public StructureDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterStructureDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitStructureDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVariableStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignVariableContext assignVariable() {
			return GetRuleContext<AssignVariableContext>(0);
		}
		public AssignVariableStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalVariableStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration() {
			return GetRuleContext<GlobalVariableDeclarationContext>(0);
		}
		public GlobalVariableStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterGlobalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitGlobalVariableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssemblyCallStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		public AssemblyCallStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssemblyCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssemblyCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnContext functionReturn() {
			return GetRuleContext<FunctionReturnContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public FunctionCallStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration() {
			return GetRuleContext<InternalVariableDeclarationContext>(0);
		}
		public VariableDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BasicCallStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicCallContext basicCall() {
			return GetRuleContext<BasicCallContext>(0);
		}
		public BasicCallStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterBasicCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitBasicCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionDeclarationStatementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public FunctionDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new VariableDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				internalVariableDeclaration();
				}
				break;
			case 2:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				functionReturn();
				}
				break;
			case 3:
				_localctx = new AssignVariableStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				assignVariable();
				}
				break;
			case 4:
				_localctx = new FunctionCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				functionCall();
				State = 99;
				Match(SemiColon);
				}
				break;
			case 5:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 101;
				ifBlock();
				}
				break;
			case 6:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 102;
				whileBlock();
				}
				break;
			case 7:
				_localctx = new BasicCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 103;
				basicCall();
				}
				break;
			case 8:
				_localctx = new AssemblyCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				assemblyCall();
				}
				break;
			case 9:
				_localctx = new GlobalVariableStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 105;
				globalVariableDeclaration();
				}
				break;
			case 10:
				_localctx = new FunctionDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 106;
				functionDeclaration();
				}
				break;
			case 11:
				_localctx = new StructureDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 107;
				structureDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalVariableDeclarationContext : ParserRuleContext {
		public FullNameContext name;
		public SimpleValueContext size;
		public ComplexValueContext complex;
		public SimpleValueContext simple;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectEquals() { return GetToken(CrimsonParser.DirectEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext[] simpleValue() {
			return GetRuleContexts<SimpleValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue(int i) {
			return GetRuleContext<SimpleValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		public InternalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterInternalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitInternalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalVariableDeclarationContext internalVariableDeclaration() {
		InternalVariableDeclarationContext _localctx = new InternalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_internalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_localctx.name = fullName();
			State = 111;
			Match(OpenBracket);
			State = 112;
			_localctx.size = simpleValue();
			State = 113;
			Match(CloseBracket);
			State = 114;
			Match(DirectEquals);
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 115;
				_localctx.complex = complexValue();
				}
				break;
			case 2:
				{
				State = 116;
				_localctx.simple = simpleValue();
				}
				break;
			}
			State = 119;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignVariableContext : ParserRuleContext {
		public AssignVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignVariable; } }
	 
		public AssignVariableContext() { }
		public virtual void CopyFrom(AssignVariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignVariableAtPointerContext : AssignVariableContext {
		public FullNameContext name;
		public ComplexValueContext complex;
		public SimpleValueContext simple;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PointerEquals() { return GetToken(CrimsonParser.PointerEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public AssignVariableAtPointerContext(AssignVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableAtPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableAtPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableAtPointer(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignVariableDirectContext : AssignVariableContext {
		public FullNameContext name;
		public ComplexValueContext complex;
		public SimpleValueContext simple;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DirectEquals() { return GetToken(CrimsonParser.DirectEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		public AssignVariableDirectContext(AssignVariableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssignVariableDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssignVariableDirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariableDirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignVariableContext assignVariable() {
		AssignVariableContext _localctx = new AssignVariableContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignVariable);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new AssignVariableDirectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				((AssignVariableDirectContext)_localctx).name = fullName();
				State = 122;
				Match(DirectEquals);
				State = 125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 123;
					((AssignVariableDirectContext)_localctx).complex = complexValue();
					}
					break;
				case 2:
					{
					State = 124;
					((AssignVariableDirectContext)_localctx).simple = simpleValue();
					}
					break;
				}
				State = 127;
				Match(SemiColon);
				}
				break;
			case 2:
				_localctx = new AssignVariableAtPointerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				((AssignVariableAtPointerContext)_localctx).name = fullName();
				State = 130;
				Match(PointerEquals);
				State = 133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 131;
					((AssignVariableAtPointerContext)_localctx).complex = complexValue();
					}
					break;
				case 2:
					{
					State = 132;
					((AssignVariableAtPointerContext)_localctx).simple = simpleValue();
					}
					break;
				}
				State = 135;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CrimsonParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(If);
			State = 140;
			condition();
			State = 141;
			scope();
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 142;
				elseBlock();
				}
				break;
			case 2:
				{
				State = 143;
				elseIfBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(CrimsonParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(While);
			State = 147;
			condition();
			State = 148;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public OperationContext op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(OpenBracket);
			State = 151;
			_localctx.op = operation();
			State = 152;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CrimsonParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(Else);
			State = 155;
			ifBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CrimsonParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitElseBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(Else);
			State = 158;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicCallContext : ParserRuleContext {
		public IToken basicText;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BasicCall() { return GetToken(CrimsonParser.BasicCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CrimsonParser.String, 0); }
		public BasicCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterBasicCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitBasicCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicCallContext basicCall() {
		BasicCallContext _localctx = new BasicCallContext(Context, State);
		EnterRule(_localctx, 22, RULE_basicCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(BasicCall);
			State = 161;
			_localctx.basicText = Match(String);
			State = 162;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		public IToken assemblyText;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssemblyCall() { return GetToken(CrimsonParser.AssemblyCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(CrimsonParser.String, 0); }
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblyCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 24, RULE_assemblyCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(AssemblyCall);
			State = 165;
			_localctx.assemblyText = Match(String);
			State = 166;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		public InternalVariableDeclarationContext declaration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(CrimsonParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration() {
			return GetRuleContext<InternalVariableDeclarationContext>(0);
		}
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_globalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(Global);
			State = 169;
			_localctx.declaration = internalVariableDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopedVariableDeclarationContext : ParserRuleContext {
		public InternalVariableDeclarationContext declaration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Scoped() { return GetToken(CrimsonParser.Scoped, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration() {
			return GetRuleContext<InternalVariableDeclarationContext>(0);
		}
		public ScopedVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopedVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterScopedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitScopedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopedVariableDeclarationContext scopedVariableDeclaration() {
		ScopedVariableDeclarationContext _localctx = new ScopedVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_scopedVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(Scoped);
			State = 172;
			_localctx.declaration = internalVariableDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public FunctionHeaderContext header;
		public ScopeContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(CrimsonParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeaderContext functionHeader() {
			return GetRuleContext<FunctionHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(Function);
			State = 175;
			_localctx.header = functionHeader();
			State = 176;
			_localctx.body = scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeaderContext : ParserRuleContext {
		public FullNameContext name;
		public ParameterListContext parameters;
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeaderContext functionHeader() {
		FunctionHeaderContext _localctx = new FunctionHeaderContext(Context, State);
		EnterRule(_localctx, 32, RULE_functionHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_localctx.name = fullName();
			State = 179;
			_localctx.parameters = parameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FullNameContext name;
		public ArgumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_localctx.name = fullName();
			State = 182;
			_localctx.args = arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext[] simpleValue() {
			return GetRuleContexts<SimpleValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue(int i) {
			return GetRuleContext<SimpleValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 36, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(OpenBracket);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 21990232752128L) != 0) {
				{
				State = 185;
				simpleValue();
				}
			}

			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 188;
				Match(Comma);
				{
				State = 189;
				simpleValue();
				}
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CrimsonParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public FunctionReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFunctionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFunctionReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnContext functionReturn() {
		FunctionReturnContext _localctx = new FunctionReturnContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionReturn);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				Match(Return);
				State = 198;
				simpleValue();
				State = 199;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				Match(Return);
				State = 202;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleValueContext : ParserRuleContext {
		public FullNameContext id;
		public IToken pointer;
		public RawValueContext raw;
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(CrimsonParser.Asterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RawValueContext rawValue() {
			return GetRuleContext<RawValueContext>(0);
		}
		public SimpleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterSimpleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitSimpleValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleValueContext simpleValue() {
		SimpleValueContext _localctx = new SimpleValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_simpleValue);
		int _la;
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ShortName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				_localctx.id = fullName();
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Asterisk) {
					{
					State = 206;
					_localctx.pointer = Match(Asterisk);
					}
				}

				}
				break;
			case Null:
			case BooleanValue:
			case Number:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				_localctx.raw = rawValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueContext : ParserRuleContext {
		public OperationContext op;
		public FunctionCallContext func;
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ComplexValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueContext complexValue() {
		ComplexValueContext _localctx = new ComplexValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_complexValue);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				_localctx.op = operation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				_localctx.func = functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(CrimsonParser.Null, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CrimsonParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanValue() { return GetToken(CrimsonParser.BooleanValue, 0); }
		public RawValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterRawValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitRawValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RawValueContext rawValue() {
		RawValueContext _localctx = new RawValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_rawValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4398046707712L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public SimpleValueContext leftValue;
		public IToken @operator;
		public SimpleValueContext rightValue;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext[] simpleValue() {
			return GetRuleContexts<SimpleValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue(int i) {
			return GetRuleContext<SimpleValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(CrimsonParser.Operator, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 46, RULE_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_localctx.leftValue = simpleValue();
			State = 219;
			_localctx.@operator = Match(Operator);
			State = 220;
			_localctx.rightValue = simpleValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public SimpleValueContext size;
		public FullNameContext name;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleValueContext simpleValue() {
			return GetRuleContext<SimpleValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_localctx.size = simpleValue();
			State = 223;
			_localctx.name = fullName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				Match(OpenBracket);
				State = 226;
				Match(CloseBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				Match(OpenBracket);
				State = 228;
				parameter();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 229;
					Match(Comma);
					State = 230;
					parameter();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 236;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDeclarationContext : ParserRuleContext {
		public FullNameContext name;
		public StructureBodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Structure() { return GetToken(CrimsonParser.Structure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullNameContext fullName() {
			return GetRuleContext<FullNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureBodyContext structureBody() {
			return GetRuleContext<StructureBodyContext>(0);
		}
		public StructureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterStructureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitStructureDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDeclarationContext structureDeclaration() {
		StructureDeclarationContext _localctx = new StructureDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_structureDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(Structure);
			State = 241;
			_localctx.name = fullName();
			State = 242;
			_localctx.body = structureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext[] internalVariableDeclaration() {
			return GetRuleContexts<InternalVariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration(int i) {
			return GetRuleContext<InternalVariableDeclarationContext>(i);
		}
		public StructureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterStructureBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitStructureBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureBodyContext structureBody() {
		StructureBodyContext _localctx = new StructureBodyContext(Context, State);
		EnterRule(_localctx, 54, RULE_structureBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(OpenBrace);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ShortName) {
				{
				{
				State = 245;
				internalVariableDeclaration();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 251;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public IToken blockSize;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenSquare() { return GetToken(CrimsonParser.OpenSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseSquare() { return GetToken(CrimsonParser.CloseSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CrimsonParser.Number, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 56, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(OpenSquare);
			State = 254;
			_localctx.blockSize = Match(Number);
			State = 255;
			Match(CloseSquare);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullNameContext : ParserRuleContext {
		public IToken libraryName;
		public IToken memberName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ShortName() { return GetTokens(CrimsonParser.ShortName); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ShortName(int i) {
			return GetToken(CrimsonParser.ShortName, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(CrimsonParser.Dot, 0); }
		public FullNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.EnterFullName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICrimsonListener typedListener = listener as ICrimsonListener;
			if (typedListener != null) typedListener.ExitFullName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullNameContext fullName() {
		FullNameContext _localctx = new FullNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_fullName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 257;
				_localctx.libraryName = Match(ShortName);
				State = 258;
				Match(Dot);
				}
				break;
			}
			State = 261;
			_localctx.memberName = Match(ShortName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,264,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,1,0,1,0,5,0,63,8,0,10,0,12,0,66,9,0,1,0,5,0,69,8,0,10,0,12,0,
		72,9,0,1,0,5,0,75,8,0,10,0,12,0,78,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,3,3,109,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,118,8,4,1,4,
		1,4,1,5,1,5,1,5,1,5,3,5,126,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,134,8,5,1,
		5,1,5,3,5,138,8,5,1,6,1,6,1,6,1,6,1,6,3,6,145,8,6,1,7,1,7,1,7,1,7,1,8,
		1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,
		12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,
		16,1,17,1,17,1,17,1,18,1,18,3,18,187,8,18,1,18,1,18,5,18,191,8,18,10,18,
		12,18,194,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,204,8,19,1,
		20,1,20,3,20,208,8,20,1,20,3,20,211,8,20,1,21,1,21,3,21,215,8,21,1,22,
		1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
		5,25,232,8,25,10,25,12,25,235,9,25,1,25,1,25,3,25,239,8,25,1,26,1,26,1,
		26,1,26,1,27,1,27,5,27,247,8,27,10,27,12,27,250,9,27,1,27,1,27,1,28,1,
		28,1,28,1,28,1,29,1,29,3,29,260,8,29,1,29,1,29,1,29,0,0,30,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		0,1,2,0,16,17,42,42,262,0,60,1,0,0,0,2,81,1,0,0,0,4,88,1,0,0,0,6,108,1,
		0,0,0,8,110,1,0,0,0,10,137,1,0,0,0,12,139,1,0,0,0,14,146,1,0,0,0,16,150,
		1,0,0,0,18,154,1,0,0,0,20,157,1,0,0,0,22,160,1,0,0,0,24,164,1,0,0,0,26,
		168,1,0,0,0,28,171,1,0,0,0,30,174,1,0,0,0,32,178,1,0,0,0,34,181,1,0,0,
		0,36,184,1,0,0,0,38,203,1,0,0,0,40,210,1,0,0,0,42,214,1,0,0,0,44,216,1,
		0,0,0,46,218,1,0,0,0,48,222,1,0,0,0,50,238,1,0,0,0,52,240,1,0,0,0,54,244,
		1,0,0,0,56,253,1,0,0,0,58,259,1,0,0,0,60,64,5,31,0,0,61,63,3,2,1,0,62,
		61,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,70,1,0,0,0,66,
		64,1,0,0,0,67,69,3,4,2,0,68,67,1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,
		71,1,0,0,0,71,76,1,0,0,0,72,70,1,0,0,0,73,75,3,6,3,0,74,73,1,0,0,0,75,
		78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,79,1,0,0,0,78,76,1,0,0,0,79,
		80,5,32,0,0,80,1,1,0,0,0,81,82,5,37,0,0,82,83,5,7,0,0,83,84,5,43,0,0,84,
		85,5,9,0,0,85,86,3,58,29,0,86,87,5,35,0,0,87,3,1,0,0,0,88,89,5,37,0,0,
		89,90,5,8,0,0,90,91,5,18,0,0,91,92,5,22,0,0,92,93,3,58,29,0,93,94,5,35,
		0,0,94,5,1,0,0,0,95,109,3,8,4,0,96,109,3,38,19,0,97,109,3,10,5,0,98,99,
		3,34,17,0,99,100,5,35,0,0,100,109,1,0,0,0,101,109,3,12,6,0,102,109,3,14,
		7,0,103,109,3,22,11,0,104,109,3,24,12,0,105,109,3,26,13,0,106,109,3,30,
		15,0,107,109,3,52,26,0,108,95,1,0,0,0,108,96,1,0,0,0,108,97,1,0,0,0,108,
		98,1,0,0,0,108,101,1,0,0,0,108,102,1,0,0,0,108,103,1,0,0,0,108,104,1,0,
		0,0,108,105,1,0,0,0,108,106,1,0,0,0,108,107,1,0,0,0,109,7,1,0,0,0,110,
		111,3,58,29,0,111,112,5,27,0,0,112,113,3,40,20,0,113,114,5,28,0,0,114,
		117,5,25,0,0,115,118,3,42,21,0,116,118,3,40,20,0,117,115,1,0,0,0,117,116,
		1,0,0,0,118,119,1,0,0,0,119,120,5,35,0,0,120,9,1,0,0,0,121,122,3,58,29,
		0,122,125,5,25,0,0,123,126,3,42,21,0,124,126,3,40,20,0,125,123,1,0,0,0,
		125,124,1,0,0,0,126,127,1,0,0,0,127,128,5,35,0,0,128,138,1,0,0,0,129,130,
		3,58,29,0,130,133,5,26,0,0,131,134,3,42,21,0,132,134,3,40,20,0,133,131,
		1,0,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,136,5,35,0,0,136,138,1,0,0,
		0,137,121,1,0,0,0,137,129,1,0,0,0,138,11,1,0,0,0,139,140,5,10,0,0,140,
		141,3,16,8,0,141,144,3,0,0,0,142,145,3,20,10,0,143,145,3,18,9,0,144,142,
		1,0,0,0,144,143,1,0,0,0,144,145,1,0,0,0,145,13,1,0,0,0,146,147,5,11,0,
		0,147,148,3,16,8,0,148,149,3,0,0,0,149,15,1,0,0,0,150,151,5,27,0,0,151,
		152,3,46,23,0,152,153,5,28,0,0,153,17,1,0,0,0,154,155,5,12,0,0,155,156,
		3,12,6,0,156,19,1,0,0,0,157,158,5,12,0,0,158,159,3,0,0,0,159,21,1,0,0,
		0,160,161,5,23,0,0,161,162,5,43,0,0,162,163,5,35,0,0,163,23,1,0,0,0,164,
		165,5,24,0,0,165,166,5,43,0,0,166,167,5,35,0,0,167,25,1,0,0,0,168,169,
		5,3,0,0,169,170,3,8,4,0,170,27,1,0,0,0,171,172,5,4,0,0,172,173,3,8,4,0,
		173,29,1,0,0,0,174,175,5,2,0,0,175,176,3,32,16,0,176,177,3,0,0,0,177,31,
		1,0,0,0,178,179,3,58,29,0,179,180,3,50,25,0,180,33,1,0,0,0,181,182,3,58,
		29,0,182,183,3,36,18,0,183,35,1,0,0,0,184,186,5,27,0,0,185,187,3,40,20,
		0,186,185,1,0,0,0,186,187,1,0,0,0,187,192,1,0,0,0,188,189,5,33,0,0,189,
		191,3,40,20,0,190,188,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,
		1,0,0,0,193,195,1,0,0,0,194,192,1,0,0,0,195,196,5,28,0,0,196,37,1,0,0,
		0,197,198,5,5,0,0,198,199,3,40,20,0,199,200,5,35,0,0,200,204,1,0,0,0,201,
		202,5,5,0,0,202,204,5,35,0,0,203,197,1,0,0,0,203,201,1,0,0,0,204,39,1,
		0,0,0,205,207,3,58,29,0,206,208,5,19,0,0,207,206,1,0,0,0,207,208,1,0,0,
		0,208,211,1,0,0,0,209,211,3,44,22,0,210,205,1,0,0,0,210,209,1,0,0,0,211,
		41,1,0,0,0,212,215,3,46,23,0,213,215,3,34,17,0,214,212,1,0,0,0,214,213,
		1,0,0,0,215,43,1,0,0,0,216,217,7,0,0,0,217,45,1,0,0,0,218,219,3,40,20,
		0,219,220,5,18,0,0,220,221,3,40,20,0,221,47,1,0,0,0,222,223,3,40,20,0,
		223,224,3,58,29,0,224,49,1,0,0,0,225,226,5,27,0,0,226,239,5,28,0,0,227,
		228,5,27,0,0,228,233,3,48,24,0,229,230,5,33,0,0,230,232,3,48,24,0,231,
		229,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,
		0,0,0,235,233,1,0,0,0,236,237,5,28,0,0,237,239,1,0,0,0,238,225,1,0,0,0,
		238,227,1,0,0,0,239,51,1,0,0,0,240,241,5,6,0,0,241,242,3,58,29,0,242,243,
		3,54,27,0,243,53,1,0,0,0,244,248,5,31,0,0,245,247,3,8,4,0,246,245,1,0,
		0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,251,1,0,0,0,250,
		248,1,0,0,0,251,252,5,32,0,0,252,55,1,0,0,0,253,254,5,29,0,0,254,255,5,
		42,0,0,255,256,5,30,0,0,256,57,1,0,0,0,257,258,5,44,0,0,258,260,5,34,0,
		0,259,257,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,5,44,0,0,262,
		59,1,0,0,0,19,64,70,76,108,117,125,133,137,144,186,192,203,207,210,214,
		233,238,248,259
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Crimson.AntlrBuild
