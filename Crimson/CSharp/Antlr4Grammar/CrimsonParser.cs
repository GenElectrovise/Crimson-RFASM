//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\GenElectrovise\OneDrive\Desktop\Programming\RF_ASM\Crimson\CSharp\Antlr4Grammar\Crimson.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CrimsonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LineComment=1, Package=2, Function=3, Global=4, Return=5, Allocate=6, 
		Structure=7, If=8, Else=9, Elif=10, Integer=11, Boolean=12, Null=13, BooleanValue=14, 
		Comparator=15, Equals=16, OpenBracket=17, CloseBracket=18, OpenSquare=19, 
		CloseSquare=20, OpenBrace=21, CloseBrace=22, Comma=23, Dot=24, SemiColon=25, 
		Underscore=26, Number=27, Identifier=28;
	public const int
		RULE_compilationUnit = 0, RULE_packageDefinitionList = 1, RULE_packageDefinition = 2, 
		RULE_packageDependencyList = 3, RULE_packageDependency = 4, RULE_packageBody = 5, 
		RULE_topLevelStatement = 6, RULE_globalVariableDeclaration = 7, RULE_functionDeclaration = 8, 
		RULE_functionBody = 9, RULE_functionOnlyStatement = 10, RULE_internalVariableDeclaration = 11, 
		RULE_assignVariable = 12, RULE_ifBlock = 13, RULE_condition = 14, RULE_elifBlock = 15, 
		RULE_elseBlock = 16, RULE_functionCall = 17, RULE_inputParameters = 18, 
		RULE_allocateMemory = 19, RULE_functionReturn = 20, RULE_resolvableValue = 21, 
		RULE_parameterList = 22, RULE_parameter = 23, RULE_structureDeclaration = 24, 
		RULE_structureBody = 25, RULE_type = 26, RULE_array = 27;
	public static readonly string[] ruleNames = {
		"compilationUnit", "packageDefinitionList", "packageDefinition", "packageDependencyList", 
		"packageDependency", "packageBody", "topLevelStatement", "globalVariableDeclaration", 
		"functionDeclaration", "functionBody", "functionOnlyStatement", "internalVariableDeclaration", 
		"assignVariable", "ifBlock", "condition", "elifBlock", "elseBlock", "functionCall", 
		"inputParameters", "allocateMemory", "functionReturn", "resolvableValue", 
		"parameterList", "parameter", "structureDeclaration", "structureBody", 
		"type", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'package'", "'function'", "'global'", "'return'", "'allocate'", 
		"'structure'", "'if'", "'else'", "'elif'", "'int'", "'bool'", "'null'", 
		null, null, "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'", 
		"';'", "'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LineComment", "Package", "Function", "Global", "Return", "Allocate", 
		"Structure", "If", "Else", "Elif", "Integer", "Boolean", "Null", "BooleanValue", 
		"Comparator", "Equals", "OpenBracket", "CloseBracket", "OpenSquare", "CloseSquare", 
		"OpenBrace", "CloseBrace", "Comma", "Dot", "SemiColon", "Underscore", 
		"Number", "Identifier"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crimson.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CrimsonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CrimsonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CrimsonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public PackageDefinitionListContext packageDefinitions;
		public IToken eof;
		[System.Diagnostics.DebuggerNonUserCode] public PackageDefinitionListContext packageDefinitionList() {
			return GetRuleContext<PackageDefinitionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CrimsonParser.Eof, 0); }
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_localctx.packageDefinitions = packageDefinitionList();
			State = 57;
			_localctx.eof = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDefinitionListContext : ParserRuleContext {
		public PackageDefinitionContext _packageDefinition;
		public IList<PackageDefinitionContext> _definitions = new List<PackageDefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public PackageDefinitionContext[] packageDefinition() {
			return GetRuleContexts<PackageDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageDefinitionContext packageDefinition(int i) {
			return GetRuleContext<PackageDefinitionContext>(i);
		}
		public PackageDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDefinitionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDefinitionListContext packageDefinitionList() {
		PackageDefinitionListContext _localctx = new PackageDefinitionListContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageDefinitionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Package) {
				{
				{
				State = 59;
				_localctx._packageDefinition = packageDefinition();
				_localctx._definitions.Add(_localctx._packageDefinition);
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDefinitionContext : ParserRuleContext {
		public IToken name;
		public PackageDependencyListContext dependencies;
		public PackageBodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Package() { return GetToken(CrimsonParser.Package, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageDependencyListContext packageDependencyList() {
			return GetRuleContext<PackageDependencyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageBodyContext packageBody() {
			return GetRuleContext<PackageBodyContext>(0);
		}
		public PackageDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDefinitionContext packageDefinition() {
		PackageDefinitionContext _localctx = new PackageDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_packageDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(Package);
			State = 66;
			_localctx.name = Match(Identifier);
			State = 67;
			_localctx.dependencies = packageDependencyList();
			State = 68;
			_localctx.body = packageBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDependencyListContext : ParserRuleContext {
		public PackageDependencyContext _packageDependency;
		public IList<PackageDependencyContext> _dependencies = new List<PackageDependencyContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageDependencyContext[] packageDependency() {
			return GetRuleContexts<PackageDependencyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageDependencyContext packageDependency(int i) {
			return GetRuleContext<PackageDependencyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public PackageDependencyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDependencyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDependencyList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDependencyListContext packageDependencyList() {
		PackageDependencyListContext _localctx = new PackageDependencyListContext(Context, State);
		EnterRule(_localctx, 6, RULE_packageDependencyList);
		int _la;
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				Match(OpenBracket);
				State = 71;
				Match(CloseBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				Match(OpenBracket);
				State = 73;
				_localctx._packageDependency = packageDependency();
				_localctx._dependencies.Add(_localctx._packageDependency);
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 74;
					Match(Comma);
					State = 75;
					_localctx._packageDependency = packageDependency();
					_localctx._dependencies.Add(_localctx._packageDependency);
					}
					}
					State = 80;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 81;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDependencyContext : ParserRuleContext {
		public IToken packageName;
		public IToken path;
		public IToken customName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(CrimsonParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(CrimsonParser.Identifier, i);
		}
		public PackageDependencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDependency; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDependency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDependencyContext packageDependency() {
		PackageDependencyContext _localctx = new PackageDependencyContext(Context, State);
		EnterRule(_localctx, 8, RULE_packageDependency);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_localctx.packageName = Match(Identifier);
			State = 86;
			Match(OpenBracket);
			State = 87;
			_localctx.path = Match(Identifier);
			State = 88;
			Match(CloseBracket);
			State = 89;
			_localctx.customName = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageBodyContext : ParserRuleContext {
		public TopLevelStatementContext _topLevelStatement;
		public IList<TopLevelStatementContext> _topLevelStatements = new List<TopLevelStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public PackageBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageBodyContext packageBody() {
		PackageBodyContext _localctx = new PackageBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_packageBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(OpenBrace);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << Global) | (1L << Structure))) != 0)) {
				{
				{
				State = 92;
				_localctx._topLevelStatement = topLevelStatement();
				_localctx._topLevelStatements.Add(_localctx._topLevelStatement);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration() {
			return GetRuleContext<GlobalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructureDeclarationContext structureDeclaration() {
			return GetRuleContext<StructureDeclarationContext>(0);
		}
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStatementContext topLevelStatement() {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_topLevelStatement);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Global:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				globalVariableDeclaration();
				}
				break;
			case Function:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				functionDeclaration();
				}
				break;
			case Structure:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				structureDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		public InternalVariableDeclarationContext declaration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Global() { return GetToken(CrimsonParser.Global, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration() {
			return GetRuleContext<InternalVariableDeclarationContext>(0);
		}
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_globalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(Global);
			State = 106;
			_localctx.declaration = internalVariableDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public IToken name;
		public TypeContext returnType;
		public ParameterListContext parameters;
		public FunctionBodyContext body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function() { return GetToken(CrimsonParser.Function, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(Function);
			State = 109;
			_localctx.name = Match(Identifier);
			State = 110;
			_localctx.returnType = type();
			State = 111;
			_localctx.parameters = parameterList();
			State = 112;
			_localctx.body = functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public FunctionOnlyStatementContext _functionOnlyStatement;
		public IList<FunctionOnlyStatementContext> _statements = new List<FunctionOnlyStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionOnlyStatementContext[] functionOnlyStatement() {
			return GetRuleContexts<FunctionOnlyStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionOnlyStatementContext functionOnlyStatement(int i) {
			return GetRuleContext<FunctionOnlyStatementContext>(i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(OpenBrace);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Return) | (1L << Allocate) | (1L << If) | (1L << Integer) | (1L << Boolean) | (1L << Null) | (1L << OpenSquare) | (1L << Identifier))) != 0)) {
				{
				{
				State = 115;
				_localctx._functionOnlyStatement = functionOnlyStatement();
				_localctx._statements.Add(_localctx._functionOnlyStatement);
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 121;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionOnlyStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration() {
			return GetRuleContext<InternalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnContext functionReturn() {
			return GetRuleContext<FunctionReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignVariableContext assignVariable() {
			return GetRuleContext<AssignVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AllocateMemoryContext allocateMemory() {
			return GetRuleContext<AllocateMemoryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public FunctionOnlyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionOnlyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionOnlyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionOnlyStatementContext functionOnlyStatement() {
		FunctionOnlyStatementContext _localctx = new FunctionOnlyStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionOnlyStatement);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				internalVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				functionReturn();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125;
				assignVariable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 126;
				allocateMemory();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 127;
				functionCall();
				State = 128;
				Match(SemiColon);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 130;
				ifBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InternalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(CrimsonParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue() {
			return GetRuleContext<ResolvableValueContext>(0);
		}
		public InternalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_internalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInternalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InternalVariableDeclarationContext internalVariableDeclaration() {
		InternalVariableDeclarationContext _localctx = new InternalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_internalVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			type();
			State = 134;
			Match(Identifier);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Equals) {
				{
				State = 135;
				Match(Equals);
				State = 136;
				resolvableValue();
				}
			}

			State = 139;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(CrimsonParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue() {
			return GetRuleContext<ResolvableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public AssignVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignVariableContext assignVariable() {
		AssignVariableContext _localctx = new AssignVariableContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(Identifier);
			State = 142;
			Match(Equals);
			State = 143;
			resolvableValue();
			State = 144;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(CrimsonParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifBlockContext elifBlock() {
			return GetRuleContext<ElifBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(If);
			State = 147;
			condition();
			State = 148;
			functionBody();
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Else:
				{
				State = 149;
				elseBlock();
				}
				break;
			case Elif:
				{
				State = 150;
				elifBlock();
				}
				break;
			case Return:
			case Allocate:
			case If:
			case Integer:
			case Boolean:
			case Null:
			case OpenSquare:
			case CloseBrace:
			case Identifier:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanValue() { return GetToken(CrimsonParser.BooleanValue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext[] resolvableValue() {
			return GetRuleContexts<ResolvableValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue(int i) {
			return GetRuleContext<ResolvableValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comparator() { return GetToken(CrimsonParser.Comparator, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 28, RULE_condition);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153;
				Match(OpenBracket);
				State = 154;
				Match(BooleanValue);
				State = 155;
				Match(CloseBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				Match(OpenBracket);
				State = 157;
				resolvableValue();
				State = 158;
				Match(Comparator);
				State = 159;
				resolvableValue();
				State = 160;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Elif() { return GetToken(CrimsonParser.Elif, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifBlockContext elifBlock() {
			return GetRuleContext<ElifBlockContext>(0);
		}
		public ElifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifBlockContext elifBlock() {
		ElifBlockContext _localctx = new ElifBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_elifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(Elif);
			State = 165;
			condition();
			State = 166;
			functionBody();
			State = 169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Else:
				{
				State = 167;
				elseBlock();
				}
				break;
			case Elif:
				{
				State = 168;
				elifBlock();
				}
				break;
			case Return:
			case Allocate:
			case If:
			case Integer:
			case Boolean:
			case Null:
			case OpenSquare:
			case CloseBrace:
			case Identifier:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(CrimsonParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(Else);
			State = 172;
			functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputParametersContext inputParameters() {
			return GetRuleContext<InputParametersContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(Identifier);
			State = 175;
			inputParameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(CrimsonParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(CrimsonParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(CrimsonParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(CrimsonParser.Number, i);
		}
		public InputParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputParametersContext inputParameters() {
		InputParametersContext _localctx = new InputParametersContext(Context, State);
		EnterRule(_localctx, 36, RULE_inputParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(OpenBracket);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Number || _la==Identifier) {
				{
				State = 178;
				_la = TokenStream.LA(1);
				if ( !(_la==Number || _la==Identifier) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 181;
				Match(Comma);
				State = 182;
				_la = TokenStream.LA(1);
				if ( !(_la==Number || _la==Identifier) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 188;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocateMemoryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Allocate() { return GetToken(CrimsonParser.Allocate, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CrimsonParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public AllocateMemoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocateMemory; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocateMemory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocateMemoryContext allocateMemory() {
		AllocateMemoryContext _localctx = new AllocateMemoryContext(Context, State);
		EnterRule(_localctx, 38, RULE_allocateMemory);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(Allocate);
			State = 191;
			Match(Identifier);
			State = 192;
			Match(Number);
			State = 193;
			Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(CrimsonParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResolvableValueContext resolvableValue() {
			return GetRuleContext<ResolvableValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(CrimsonParser.SemiColon, 0); }
		public FunctionReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnContext functionReturn() {
		FunctionReturnContext _localctx = new FunctionReturnContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionReturn);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195;
				Match(Return);
				State = 196;
				resolvableValue();
				State = 197;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				Match(Return);
				State = 200;
				Match(SemiColon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResolvableValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(CrimsonParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(CrimsonParser.Null, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanValue() { return GetToken(CrimsonParser.BooleanValue, 0); }
		public ResolvableValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resolvableValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResolvableValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResolvableValueContext resolvableValue() {
		ResolvableValueContext _localctx = new ResolvableValueContext(Context, State);
		EnterRule(_localctx, 42, RULE_resolvableValue);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204;
				Match(Number);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 205;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 206;
				Match(Null);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 207;
				Match(BooleanValue);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(CrimsonParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(CrimsonParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(CrimsonParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(CrimsonParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameterList);
		int _la;
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				Match(OpenBracket);
				State = 211;
				Match(CloseBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212;
				Match(OpenBracket);
				State = 213;
				parameter();
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 214;
					Match(Comma);
					State = 215;
					parameter();
					}
					}
					State = 220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 221;
				Match(CloseBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 46, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			type();
			State = 226;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Structure() { return GetToken(CrimsonParser.Structure, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructureBodyContext structureBody() {
			return GetRuleContext<StructureBodyContext>(0);
		}
		public StructureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureDeclarationContext structureDeclaration() {
		StructureDeclarationContext _localctx = new StructureDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_structureDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(Structure);
			State = 229;
			Match(Identifier);
			State = 230;
			structureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(CrimsonParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(CrimsonParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext[] internalVariableDeclaration() {
			return GetRuleContexts<InternalVariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InternalVariableDeclarationContext internalVariableDeclaration(int i) {
			return GetRuleContext<InternalVariableDeclarationContext>(i);
		}
		public StructureBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructureBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructureBodyContext structureBody() {
		StructureBodyContext _localctx = new StructureBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_structureBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(OpenBrace);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Integer) | (1L << Boolean) | (1L << Null) | (1L << OpenSquare) | (1L << Identifier))) != 0)) {
				{
				{
				State = 233;
				internalVariableDeclaration();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 239;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(CrimsonParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(CrimsonParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(CrimsonParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(CrimsonParser.Null, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_type);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				Match(Integer);
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 2);
				{
				State = 242;
				Match(Boolean);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 243;
				Match(Identifier);
				}
				break;
			case OpenSquare:
				EnterOuterAlt(_localctx, 4);
				{
				State = 244;
				array();
				}
				break;
			case Null:
				EnterOuterAlt(_localctx, 5);
				{
				State = 245;
				Match(Null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenSquare() { return GetToken(CrimsonParser.OpenSquare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseSquare() { return GetToken(CrimsonParser.CloseSquare, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICrimsonVisitor<TResult> typedVisitor = visitor as ICrimsonVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 54, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(OpenSquare);
			State = 249;
			type();
			State = 250;
			Match(CloseSquare);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\xFF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', 
		'\x3', '?', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x42', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', 'O', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'R', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'V', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', '`', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x63', '\v', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'j', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', 'w', '\n', '\v', '\f', '\v', '\xE', '\v', 'z', '\v', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x86', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x8C', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x9A', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xA5', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xAC', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xB6', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xBA', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\xBD', '\v', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xCC', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\xD3', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\xDB', '\n', 
		'\x18', '\f', '\x18', '\xE', '\x18', '\xDE', '\v', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\xE2', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\xED', '\n', '\x1B', 
		'\f', '\x1B', '\xE', '\x1B', '\xF0', '\v', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\xF9', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x2', '\x2', '\x1E', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', '\x2', '\x3', '\x3', '\x2', '\x1D', 
		'\x1E', '\x2', '\x102', '\x2', ':', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x6', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'U', '\x3', '\x2', '\x2', '\x2', '\n', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\f', ']', '\x3', '\x2', '\x2', '\x2', '\xE', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'k', '\x3', '\x2', '\x2', '\x2', '\x12', 'n', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 't', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x18', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xA4', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\"', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xB0', '\x3', '\x2', '\x2', '\x2', '&', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xC0', '\x3', '\x2', '\x2', '\x2', '*', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xD2', '\x3', '\x2', '\x2', '\x2', '.', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xE6', '\x3', '\x2', '\x2', '\x2', '\x34', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x38', '\xFA', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x5', '\x4', '\x3', '\x2', ';', 
		'<', '\a', '\x2', '\x2', '\x3', '<', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'=', '?', '\x5', '\x6', '\x4', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x42', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\a', '\x4', '\x2', '\x2', '\x44', '\x45', '\a', '\x1E', '\x2', 
		'\x2', '\x45', '\x46', '\x5', '\b', '\x5', '\x2', '\x46', 'G', '\x5', 
		'\f', '\a', '\x2', 'G', '\a', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', 
		'\x13', '\x2', '\x2', 'I', 'V', '\a', '\x14', '\x2', '\x2', 'J', 'K', 
		'\a', '\x13', '\x2', '\x2', 'K', 'P', '\x5', '\n', '\x6', '\x2', 'L', 
		'M', '\a', '\x19', '\x2', '\x2', 'M', 'O', '\x5', '\n', '\x6', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 
		'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'S', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\a', '\x14', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 
		'U', 'H', '\x3', '\x2', '\x2', '\x2', 'U', 'J', '\x3', '\x2', '\x2', '\x2', 
		'V', '\t', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x1E', '\x2', 
		'\x2', 'X', 'Y', '\a', '\x13', '\x2', '\x2', 'Y', 'Z', '\a', '\x1E', '\x2', 
		'\x2', 'Z', '[', '\a', '\x14', '\x2', '\x2', '[', '\\', '\a', '\x1E', 
		'\x2', '\x2', '\\', '\v', '\x3', '\x2', '\x2', '\x2', ']', '\x61', '\a', 
		'\x17', '\x2', '\x2', '^', '`', '\x5', '\xE', '\b', '\x2', '_', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x64', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\x18', '\x2', '\x2', '\x65', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x66', 'j', '\x5', '\x10', '\t', '\x2', 
		'g', 'j', '\x5', '\x12', '\n', '\x2', 'h', 'j', '\x5', '\x32', '\x1A', 
		'\x2', 'i', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'j', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\a', '\x6', '\x2', '\x2', 'l', 'm', '\x5', 
		'\x18', '\r', '\x2', 'm', '\x11', '\x3', '\x2', '\x2', '\x2', 'n', 'o', 
		'\a', '\x5', '\x2', '\x2', 'o', 'p', '\a', '\x1E', '\x2', '\x2', 'p', 
		'q', '\x5', '\x36', '\x1C', '\x2', 'q', 'r', '\x5', '.', '\x18', '\x2', 
		'r', 's', '\x5', '\x14', '\v', '\x2', 's', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 't', 'x', '\a', '\x17', '\x2', '\x2', 'u', 'w', '\x5', '\x16', 
		'\f', '\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\a', '\x18', '\x2', '\x2', '|', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '}', '\x86', '\x5', '\x18', '\r', '\x2', '~', '\x86', 
		'\x5', '*', '\x16', '\x2', '\x7F', '\x86', '\x5', '\x1A', '\xE', '\x2', 
		'\x80', '\x86', '\x5', '(', '\x15', '\x2', '\x81', '\x82', '\x5', '$', 
		'\x13', '\x2', '\x82', '\x83', '\a', '\x1B', '\x2', '\x2', '\x83', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\x5', '\x1C', '\xF', '\x2', 
		'\x85', '}', '\x3', '\x2', '\x2', '\x2', '\x85', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x85', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x81', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\x5', '\x36', '\x1C', '\x2', '\x88', '\x8B', '\a', 
		'\x1E', '\x2', '\x2', '\x89', '\x8A', '\a', '\x12', '\x2', '\x2', '\x8A', 
		'\x8C', '\x5', ',', '\x17', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x1B', '\x2', '\x2', '\x8E', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\x1E', '\x2', 
		'\x2', '\x90', '\x91', '\a', '\x12', '\x2', '\x2', '\x91', '\x92', '\x5', 
		',', '\x17', '\x2', '\x92', '\x93', '\a', '\x1B', '\x2', '\x2', '\x93', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\n', '\x2', 
		'\x2', '\x95', '\x96', '\x5', '\x1E', '\x10', '\x2', '\x96', '\x99', '\x5', 
		'\x14', '\v', '\x2', '\x97', '\x9A', '\x5', '\"', '\x12', '\x2', '\x98', 
		'\x9A', '\x5', ' ', '\x11', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\a', '\x13', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x10', '\x2', 
		'\x2', '\x9D', '\xA5', '\a', '\x14', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'\x13', '\x2', '\x2', '\x9F', '\xA0', '\x5', ',', '\x17', '\x2', '\xA0', 
		'\xA1', '\a', '\x11', '\x2', '\x2', '\xA1', '\xA2', '\x5', ',', '\x17', 
		'\x2', '\xA2', '\xA3', '\a', '\x14', '\x2', '\x2', '\xA3', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', '\f', '\x2', '\x2', '\xA7', '\xA8', '\x5', 
		'\x1E', '\x10', '\x2', '\xA8', '\xAB', '\x5', '\x14', '\v', '\x2', '\xA9', 
		'\xAC', '\x5', '\"', '\x12', '\x2', '\xAA', '\xAC', '\x5', ' ', '\x11', 
		'\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\v', '\x2', '\x2', 
		'\xAE', '\xAF', '\x5', '\x14', '\v', '\x2', '\xAF', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB1', '\a', '\x1E', '\x2', '\x2', '\xB1', '\xB2', 
		'\x5', '&', '\x14', '\x2', '\xB2', '%', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB5', '\a', '\x13', '\x2', '\x2', '\xB4', '\xB6', '\t', '\x2', '\x2', 
		'\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB8', '\a', '\x19', '\x2', '\x2', '\xB8', '\xBA', '\t', '\x2', '\x2', 
		'\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', 
		'\x14', '\x2', '\x2', '\xBF', '\'', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\a', '\b', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x1E', '\x2', 
		'\x2', '\xC2', '\xC3', '\a', '\x1D', '\x2', '\x2', '\xC3', '\xC4', '\a', 
		'\x1B', '\x2', '\x2', '\xC4', ')', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\a', '\x2', '\x2', '\xC6', '\xC7', '\x5', ',', '\x17', 
		'\x2', '\xC7', '\xC8', '\a', '\x1B', '\x2', '\x2', '\xC8', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\a', '\x2', '\x2', '\xCA', 
		'\xCC', '\a', '\x1B', '\x2', '\x2', '\xCB', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xD3', '\a', '\x1E', '\x2', '\x2', '\xCE', 
		'\xD3', '\a', '\x1D', '\x2', '\x2', '\xCF', '\xD3', '\x5', '$', '\x13', 
		'\x2', '\xD0', '\xD3', '\a', '\xF', '\x2', '\x2', '\xD1', '\xD3', '\a', 
		'\x10', '\x2', '\x2', '\xD2', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '-', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\a', '\x13', '\x2', '\x2', '\xD5', '\xE2', '\a', '\x14', '\x2', 
		'\x2', '\xD6', '\xD7', '\a', '\x13', '\x2', '\x2', '\xD7', '\xDC', '\x5', 
		'\x30', '\x19', '\x2', '\xD8', '\xD9', '\a', '\x19', '\x2', '\x2', '\xD9', 
		'\xDB', '\x5', '\x30', '\x19', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\a', '\x14', '\x2', '\x2', '\xE0', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xE2', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xE4', '\x5', '\x36', '\x1C', '\x2', '\xE4', '\xE5', '\a', 
		'\x1E', '\x2', '\x2', '\xE5', '\x31', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE7', '\a', '\t', '\x2', '\x2', '\xE7', '\xE8', '\a', '\x1E', '\x2', 
		'\x2', '\xE8', '\xE9', '\x5', '\x34', '\x1B', '\x2', '\xE9', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEE', '\a', '\x17', '\x2', '\x2', '\xEB', 
		'\xED', '\x5', '\x18', '\r', '\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF2', '\a', '\x18', '\x2', '\x2', '\xF2', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF9', '\a', '\r', '\x2', '\x2', '\xF4', 
		'\xF9', '\a', '\xE', '\x2', '\x2', '\xF5', '\xF9', '\a', '\x1E', '\x2', 
		'\x2', '\xF6', '\xF9', '\x5', '\x38', '\x1D', '\x2', '\xF7', '\xF9', '\a', 
		'\xF', '\x2', '\x2', '\xF8', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\x37', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\a', '\x15', '\x2', '\x2', '\xFB', '\xFC', '\x5', '\x36', '\x1C', 
		'\x2', '\xFC', '\xFD', '\a', '\x16', '\x2', '\x2', '\xFD', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '@', 'P', 'U', '\x61', 'i', 'x', '\x85', 
		'\x8B', '\x99', '\xA4', '\xAB', '\xB5', '\xBB', '\xCB', '\xD2', '\xDC', 
		'\xE1', '\xEE', '\xF8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
